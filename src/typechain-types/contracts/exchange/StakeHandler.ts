/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";

export declare namespace Deposit {
  export type PropsStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    longTokenAmount: PromiseOrValue<BigNumberish>;
    shortTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    updatedAtBlock: PromiseOrValue<BigNumberish>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type PropsStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    string
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    market: string;
    longTokenAmount: BigNumber;
    shortTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
    updatedAtBlock: BigNumber;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    data: string;
  };
}

export declare namespace Withdrawal {
  export type PropsStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    marketTokensLongAmount: PromiseOrValue<BigNumberish>;
    marketTokensShortAmount: PromiseOrValue<BigNumberish>;
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    updatedAtBlock: PromiseOrValue<BigNumberish>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type PropsStructOutput = [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber,
    string
  ] & {
    account: string;
    receiver: string;
    callbackContract: string;
    market: string;
    marketTokensLongAmount: BigNumber;
    marketTokensShortAmount: BigNumber;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    updatedAtBlock: BigNumber;
    shouldUnwrapNativeToken: boolean;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    data: string;
  };
}

export interface StakeHandlerInterface extends utils.Interface {
  functions: {
    "afterDepositCancellation(bytes32,(address,address,address,address,uint256,uint256,uint256,uint256,bool,uint256,uint256,bytes))": FunctionFragment;
    "afterDepositExecution(bytes32,(address,address,address,address,uint256,uint256,uint256,uint256,bool,uint256,uint256,bytes))": FunctionFragment;
    "afterWithdrawalCancellation(bytes32,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,bytes))": FunctionFragment;
    "afterWithdrawalExecution(bytes32,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,bytes))": FunctionFragment;
    "beforeDepositExecution(bytes32,(address,address,address,address,uint256,uint256,uint256,uint256,bool,uint256,uint256,bytes))": FunctionFragment;
    "beforeWithdrawalExecution(bytes32,(address,address,address,address,uint256,uint256,uint256,uint256,uint256,bool,uint256,uint256,bytes))": FunctionFragment;
    "depositHandler()": FunctionFragment;
    "depositToken()": FunctionFragment;
    "lockedToken()": FunctionFragment;
    "withdrawalHandler()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "afterDepositCancellation"
      | "afterDepositExecution"
      | "afterWithdrawalCancellation"
      | "afterWithdrawalExecution"
      | "beforeDepositExecution"
      | "beforeWithdrawalExecution"
      | "depositHandler"
      | "depositToken"
      | "lockedToken"
      | "withdrawalHandler"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "afterDepositCancellation",
    values: [PromiseOrValue<BytesLike>, Deposit.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "afterDepositExecution",
    values: [PromiseOrValue<BytesLike>, Deposit.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "afterWithdrawalCancellation",
    values: [PromiseOrValue<BytesLike>, Withdrawal.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "afterWithdrawalExecution",
    values: [PromiseOrValue<BytesLike>, Withdrawal.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeDepositExecution",
    values: [PromiseOrValue<BytesLike>, Deposit.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeWithdrawalExecution",
    values: [PromiseOrValue<BytesLike>, Withdrawal.PropsStruct]
  ): string;
  encodeFunctionData(functionFragment: "depositHandler", values?: undefined): string;
  encodeFunctionData(functionFragment: "depositToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "lockedToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdrawalHandler", values?: undefined): string;

  decodeFunctionResult(functionFragment: "afterDepositCancellation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "afterDepositExecution", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "afterWithdrawalCancellation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "afterWithdrawalExecution", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beforeDepositExecution", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beforeWithdrawalExecution", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositHandler", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockedToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdrawalHandler", data: BytesLike): Result;

  events: {};
}

export interface StakeHandler extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: StakeHandlerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    afterDepositCancellation(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Deposit.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    afterDepositExecution(
      arg0: PromiseOrValue<BytesLike>,
      deposit: Deposit.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    afterWithdrawalCancellation(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Withdrawal.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    afterWithdrawalExecution(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Withdrawal.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeDepositExecution(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Deposit.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeWithdrawalExecution(
      arg0: PromiseOrValue<BytesLike>,
      withdrawal: Withdrawal.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositHandler(overrides?: CallOverrides): Promise<[string]>;

    depositToken(overrides?: CallOverrides): Promise<[string]>;

    lockedToken(overrides?: CallOverrides): Promise<[string]>;

    withdrawalHandler(overrides?: CallOverrides): Promise<[string]>;
  };

  afterDepositCancellation(
    arg0: PromiseOrValue<BytesLike>,
    arg1: Deposit.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  afterDepositExecution(
    arg0: PromiseOrValue<BytesLike>,
    deposit: Deposit.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  afterWithdrawalCancellation(
    arg0: PromiseOrValue<BytesLike>,
    arg1: Withdrawal.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  afterWithdrawalExecution(
    arg0: PromiseOrValue<BytesLike>,
    arg1: Withdrawal.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeDepositExecution(
    arg0: PromiseOrValue<BytesLike>,
    arg1: Deposit.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeWithdrawalExecution(
    arg0: PromiseOrValue<BytesLike>,
    withdrawal: Withdrawal.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositHandler(overrides?: CallOverrides): Promise<string>;

  depositToken(overrides?: CallOverrides): Promise<string>;

  lockedToken(overrides?: CallOverrides): Promise<string>;

  withdrawalHandler(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    afterDepositCancellation(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Deposit.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    afterDepositExecution(
      arg0: PromiseOrValue<BytesLike>,
      deposit: Deposit.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    afterWithdrawalCancellation(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Withdrawal.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    afterWithdrawalExecution(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Withdrawal.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeDepositExecution(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Deposit.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeWithdrawalExecution(
      arg0: PromiseOrValue<BytesLike>,
      withdrawal: Withdrawal.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    depositHandler(overrides?: CallOverrides): Promise<string>;

    depositToken(overrides?: CallOverrides): Promise<string>;

    lockedToken(overrides?: CallOverrides): Promise<string>;

    withdrawalHandler(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    afterDepositCancellation(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Deposit.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    afterDepositExecution(
      arg0: PromiseOrValue<BytesLike>,
      deposit: Deposit.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    afterWithdrawalCancellation(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Withdrawal.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    afterWithdrawalExecution(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Withdrawal.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeDepositExecution(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Deposit.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeWithdrawalExecution(
      arg0: PromiseOrValue<BytesLike>,
      withdrawal: Withdrawal.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositHandler(overrides?: CallOverrides): Promise<BigNumber>;

    depositToken(overrides?: CallOverrides): Promise<BigNumber>;

    lockedToken(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawalHandler(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    afterDepositCancellation(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Deposit.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    afterDepositExecution(
      arg0: PromiseOrValue<BytesLike>,
      deposit: Deposit.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    afterWithdrawalCancellation(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Withdrawal.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    afterWithdrawalExecution(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Withdrawal.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeDepositExecution(
      arg0: PromiseOrValue<BytesLike>,
      arg1: Deposit.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeWithdrawalExecution(
      arg0: PromiseOrValue<BytesLike>,
      withdrawal: Withdrawal.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawalHandler(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
