/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";

export declare namespace Order {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialCollateralToken: PromiseOrValue<string>;
    swapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [string, string, string, string, string, string[]] & {
    account: string;
    receiver: string;
    callbackContract: string;
    market: string;
    initialCollateralToken: string;
    swapPath: string[];
  };

  export type NumbersStruct = {
    sizeDeltaUsd: PromiseOrValue<BigNumberish>;
    initialCollateralDeltaAmount: PromiseOrValue<BigNumberish>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    minOutputAmount: PromiseOrValue<BigNumberish>;
    updatedAtBlock: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    sizeDeltaUsd: BigNumber;
    initialCollateralDeltaAmount: BigNumber;
    triggerPrice: BigNumber;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    minOutputAmount: BigNumber;
    updatedAtBlock: BigNumber;
  };

  export type FlagsStruct = {
    orderType: PromiseOrValue<BigNumberish>;
    isLong: PromiseOrValue<boolean>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    isFrozen: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [number, boolean, boolean, boolean] & {
    orderType: number;
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    isFrozen: boolean;
  };

  export type PropsStruct = {
    addresses: Order.AddressesStruct;
    numbers: Order.NumbersStruct;
    flags: Order.FlagsStruct;
    data: PromiseOrValue<BytesLike>;
  };

  export type PropsStructOutput = [
    Order.AddressesStructOutput,
    Order.NumbersStructOutput,
    Order.FlagsStructOutput,
    string
  ] & {
    addresses: Order.AddressesStructOutput;
    numbers: Order.NumbersStructOutput;
    flags: Order.FlagsStructOutput;
    data: string;
  };
}

export interface IOrderCallbackReceiverInterface extends utils.Interface {
  functions: {
    "afterOrderCancellation(bytes32,((address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint8,bool,bool,bool),bytes))": FunctionFragment;
    "afterOrderExecution(bytes32,((address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint8,bool,bool,bool),bytes))": FunctionFragment;
    "afterOrderFrozen(bytes32,((address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint8,bool,bool,bool),bytes))": FunctionFragment;
    "beforeOrderExecution(bytes32,((address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint8,bool,bool,bool),bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "afterOrderCancellation"
      | "afterOrderExecution"
      | "afterOrderFrozen"
      | "beforeOrderExecution"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "afterOrderCancellation",
    values: [PromiseOrValue<BytesLike>, Order.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "afterOrderExecution",
    values: [PromiseOrValue<BytesLike>, Order.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "afterOrderFrozen",
    values: [PromiseOrValue<BytesLike>, Order.PropsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "beforeOrderExecution",
    values: [PromiseOrValue<BytesLike>, Order.PropsStruct]
  ): string;

  decodeFunctionResult(functionFragment: "afterOrderCancellation", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "afterOrderExecution", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "afterOrderFrozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "beforeOrderExecution", data: BytesLike): Result;

  events: {};
}

export interface IOrderCallbackReceiver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IOrderCallbackReceiverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    afterOrderCancellation(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    afterOrderExecution(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    afterOrderFrozen(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    beforeOrderExecution(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  afterOrderCancellation(
    key: PromiseOrValue<BytesLike>,
    order: Order.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  afterOrderExecution(
    key: PromiseOrValue<BytesLike>,
    order: Order.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  afterOrderFrozen(
    key: PromiseOrValue<BytesLike>,
    order: Order.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  beforeOrderExecution(
    key: PromiseOrValue<BytesLike>,
    order: Order.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    afterOrderCancellation(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    afterOrderExecution(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    afterOrderFrozen(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    beforeOrderExecution(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    afterOrderCancellation(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    afterOrderExecution(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    afterOrderFrozen(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    beforeOrderExecution(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    afterOrderCancellation(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    afterOrderExecution(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    afterOrderFrozen(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    beforeOrderExecution(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
