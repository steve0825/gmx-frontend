/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";

export declare namespace Deposit {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
  };

  export type AddressesStructOutput = [string, string, string, string] & {
    account: string;
    receiver: string;
    callbackContract: string;
    market: string;
  };

  export type NumbersStruct = {
    longTokenAmount: PromiseOrValue<BigNumberish>;
    shortTokenAmount: PromiseOrValue<BigNumberish>;
    minMarketTokens: PromiseOrValue<BigNumberish>;
    updatedAtBlock: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    longTokenAmount: BigNumber;
    shortTokenAmount: BigNumber;
    minMarketTokens: BigNumber;
    updatedAtBlock: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type PropsStruct = {
    addresses: Deposit.AddressesStruct;
    numbers: Deposit.NumbersStruct;
    flags: Deposit.FlagsStruct;
    data: PromiseOrValue<BytesLike>;
  };

  export type PropsStructOutput = [
    Deposit.AddressesStructOutput,
    Deposit.NumbersStructOutput,
    Deposit.FlagsStructOutput,
    string
  ] & {
    addresses: Deposit.AddressesStructOutput;
    numbers: Deposit.NumbersStructOutput;
    flags: Deposit.FlagsStructOutput;
    data: string;
  };
}

export declare namespace Order {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
    initialCollateralToken: PromiseOrValue<string>;
    swapPath: PromiseOrValue<string>[];
  };

  export type AddressesStructOutput = [string, string, string, string, string, string[]] & {
    account: string;
    receiver: string;
    callbackContract: string;
    market: string;
    initialCollateralToken: string;
    swapPath: string[];
  };

  export type NumbersStruct = {
    sizeDeltaUsd: PromiseOrValue<BigNumberish>;
    initialCollateralDeltaAmount: PromiseOrValue<BigNumberish>;
    triggerPrice: PromiseOrValue<BigNumberish>;
    acceptablePrice: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
    minOutputAmount: PromiseOrValue<BigNumberish>;
    updatedAtBlock: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    sizeDeltaUsd: BigNumber;
    initialCollateralDeltaAmount: BigNumber;
    triggerPrice: BigNumber;
    acceptablePrice: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
    minOutputAmount: BigNumber;
    updatedAtBlock: BigNumber;
  };

  export type FlagsStruct = {
    orderType: PromiseOrValue<BigNumberish>;
    isLong: PromiseOrValue<boolean>;
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
    isFrozen: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [number, boolean, boolean, boolean] & {
    orderType: number;
    isLong: boolean;
    shouldUnwrapNativeToken: boolean;
    isFrozen: boolean;
  };

  export type PropsStruct = {
    addresses: Order.AddressesStruct;
    numbers: Order.NumbersStruct;
    flags: Order.FlagsStruct;
    data: PromiseOrValue<BytesLike>;
  };

  export type PropsStructOutput = [
    Order.AddressesStructOutput,
    Order.NumbersStructOutput,
    Order.FlagsStructOutput,
    string
  ] & {
    addresses: Order.AddressesStructOutput;
    numbers: Order.NumbersStructOutput;
    flags: Order.FlagsStructOutput;
    data: string;
  };
}

export declare namespace PositionPricingUtils {
  export type PositionReferralFeesStruct = {
    affiliate: PromiseOrValue<string>;
    traderDiscountAmount: PromiseOrValue<BigNumberish>;
    affiliateRewardAmount: PromiseOrValue<BigNumberish>;
  };

  export type PositionReferralFeesStructOutput = [string, BigNumber, BigNumber] & {
    affiliate: string;
    traderDiscountAmount: BigNumber;
    affiliateRewardAmount: BigNumber;
  };

  export type PositionFundingFeesStruct = {
    fundingFeeAmount: PromiseOrValue<BigNumberish>;
    latestLongTokenFundingAmountPerSize: PromiseOrValue<BigNumberish>;
    latestShortTokenFundingAmountPerSize: PromiseOrValue<BigNumberish>;
    longTokenFundingFeeAmount: PromiseOrValue<BigNumberish>;
    shortTokenFundingFeeAmount: PromiseOrValue<BigNumberish>;
    hasPendingLongTokenFundingFee: PromiseOrValue<boolean>;
    hasPendingShortTokenFundingFee: PromiseOrValue<boolean>;
  };

  export type PositionFundingFeesStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    boolean,
    boolean
  ] & {
    fundingFeeAmount: BigNumber;
    latestLongTokenFundingAmountPerSize: BigNumber;
    latestShortTokenFundingAmountPerSize: BigNumber;
    longTokenFundingFeeAmount: BigNumber;
    shortTokenFundingFeeAmount: BigNumber;
    hasPendingLongTokenFundingFee: boolean;
    hasPendingShortTokenFundingFee: boolean;
  };

  export type PositionFeesStruct = {
    referral: PositionPricingUtils.PositionReferralFeesStruct;
    funding: PositionPricingUtils.PositionFundingFeesStruct;
    feeReceiverAmount: PromiseOrValue<BigNumberish>;
    feesForPool: PromiseOrValue<BigNumberish>;
    positionFeeAmountForPool: PromiseOrValue<BigNumberish>;
    positionFeeAmount: PromiseOrValue<BigNumberish>;
    borrowingFeeAmount: PromiseOrValue<BigNumberish>;
    totalNetCostAmount: PromiseOrValue<BigNumberish>;
    totalNetCostUsd: PromiseOrValue<BigNumberish>;
  };

  export type PositionFeesStructOutput = [
    PositionPricingUtils.PositionReferralFeesStructOutput,
    PositionPricingUtils.PositionFundingFeesStructOutput,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    referral: PositionPricingUtils.PositionReferralFeesStructOutput;
    funding: PositionPricingUtils.PositionFundingFeesStructOutput;
    feeReceiverAmount: BigNumber;
    feesForPool: BigNumber;
    positionFeeAmountForPool: BigNumber;
    positionFeeAmount: BigNumber;
    borrowingFeeAmount: BigNumber;
    totalNetCostAmount: BigNumber;
    totalNetCostUsd: BigNumber;
  };
}

export declare namespace SwapPricingUtils {
  export type SwapFeesStruct = {
    feeReceiverAmount: PromiseOrValue<BigNumberish>;
    feesForPool: PromiseOrValue<BigNumberish>;
    amountAfterFees: PromiseOrValue<BigNumberish>;
  };

  export type SwapFeesStructOutput = [BigNumber, BigNumber, BigNumber] & {
    feeReceiverAmount: BigNumber;
    feesForPool: BigNumber;
    amountAfterFees: BigNumber;
  };
}

export declare namespace Withdrawal {
  export type AddressesStruct = {
    account: PromiseOrValue<string>;
    receiver: PromiseOrValue<string>;
    callbackContract: PromiseOrValue<string>;
    market: PromiseOrValue<string>;
  };

  export type AddressesStructOutput = [string, string, string, string] & {
    account: string;
    receiver: string;
    callbackContract: string;
    market: string;
  };

  export type NumbersStruct = {
    marketTokensLongAmount: PromiseOrValue<BigNumberish>;
    marketTokensShortAmount: PromiseOrValue<BigNumberish>;
    minLongTokenAmount: PromiseOrValue<BigNumberish>;
    minShortTokenAmount: PromiseOrValue<BigNumberish>;
    updatedAtBlock: PromiseOrValue<BigNumberish>;
    executionFee: PromiseOrValue<BigNumberish>;
    callbackGasLimit: PromiseOrValue<BigNumberish>;
  };

  export type NumbersStructOutput = [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
    marketTokensLongAmount: BigNumber;
    marketTokensShortAmount: BigNumber;
    minLongTokenAmount: BigNumber;
    minShortTokenAmount: BigNumber;
    updatedAtBlock: BigNumber;
    executionFee: BigNumber;
    callbackGasLimit: BigNumber;
  };

  export type FlagsStruct = {
    shouldUnwrapNativeToken: PromiseOrValue<boolean>;
  };

  export type FlagsStructOutput = [boolean] & {
    shouldUnwrapNativeToken: boolean;
  };

  export type PropsStruct = {
    addresses: Withdrawal.AddressesStruct;
    numbers: Withdrawal.NumbersStruct;
    flags: Withdrawal.FlagsStruct;
    data: PromiseOrValue<BytesLike>;
  };

  export type PropsStructOutput = [
    Withdrawal.AddressesStructOutput,
    Withdrawal.NumbersStructOutput,
    Withdrawal.FlagsStructOutput,
    string
  ] & {
    addresses: Withdrawal.AddressesStructOutput;
    numbers: Withdrawal.NumbersStructOutput;
    flags: Withdrawal.FlagsStructOutput;
    data: string;
  };
}

export interface EventEmitterInterface extends utils.Interface {
  functions: {
    "emitAdlStateUpdated(int256,uint256,bool)": FunctionFragment;
    "emitAffiliateRewardClaimed(address,address,address,address,uint256)": FunctionFragment;
    "emitAffiliateRewardEarned(address,address,address,address,uint256)": FunctionFragment;
    "emitClaimableFundingUpdated(address,address,address,uint256,uint256)": FunctionFragment;
    "emitCollateralSumUpdated(address,address,bool,int256,uint256)": FunctionFragment;
    "emitDepositCancelled(bytes32,bytes)": FunctionFragment;
    "emitDepositCreated(bytes32,((address,address,address,address),(uint256,uint256,uint256,uint256,uint256,uint256),(bool),bytes))": FunctionFragment;
    "emitDepositExecuted(bytes32)": FunctionFragment;
    "emitFundingFeesClaimed(address,address,address,address,uint256)": FunctionFragment;
    "emitInsufficientFundingFeePayment(uint256,uint256)": FunctionFragment;
    "emitOpenInterestInTokensUpdated(address,address,bool,int256,uint256)": FunctionFragment;
    "emitOpenInterestUpdated(address,address,bool,int256,uint256)": FunctionFragment;
    "emitOraclePriceUpdated(address,uint256,uint256,bool,bool)": FunctionFragment;
    "emitOrderCancelled(bytes32,string)": FunctionFragment;
    "emitOrderCreated(bytes32,((address,address,address,address,address,address[]),(uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256),(uint8,bool,bool,bool),bytes))": FunctionFragment;
    "emitOrderExecuted(bytes32)": FunctionFragment;
    "emitOrderFrozen(bytes32,string)": FunctionFragment;
    "emitOrderUpdated(bytes32,uint256,uint256,uint256)": FunctionFragment;
    "emitPoolAmountUpdated(address,address,int256,uint256)": FunctionFragment;
    "emitPositionDecrease(bytes32,address,address,address,bool,uint256,uint256,int256,int256,int256,int256,uint256)": FunctionFragment;
    "emitPositionFeesCollected(bool,((address,uint256,uint256),(uint256,int256,int256,int256,int256,bool,bool),uint256,uint256,uint256,uint256,uint256,uint256,uint256))": FunctionFragment;
    "emitPositionImpactPoolAmountUpdated(address,int256,uint256)": FunctionFragment;
    "emitPositionIncrease(bytes32,address,address,address,bool,uint256,uint256,int256)": FunctionFragment;
    "emitSwapFeesCollected(bytes32,(uint256,uint256,uint256))": FunctionFragment;
    "emitSwapImpactPoolAmountUpdated(address,address,int256,uint256)": FunctionFragment;
    "emitTraderReferralDiscountApplied(address,address,address,uint256)": FunctionFragment;
    "emitWithdrawalCancelled(bytes32,bytes)": FunctionFragment;
    "emitWithdrawalCreated(bytes32,((address,address,address,address),(uint256,uint256,uint256,uint256,uint256,uint256,uint256),(bool),bytes))": FunctionFragment;
    "emitWithdrawalExecuted(bytes32)": FunctionFragment;
    "gov()": FunctionFragment;
    "log1(bytes32,bytes)": FunctionFragment;
    "log2(bytes32,bytes32,bytes)": FunctionFragment;
    "log3(bytes32,bytes32,bytes32,bytes)": FunctionFragment;
    "log4(bytes32,bytes32,bytes32,bytes32,bytes)": FunctionFragment;
    "roleStore()": FunctionFragment;
    "setGov(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "emitAdlStateUpdated"
      | "emitAffiliateRewardClaimed"
      | "emitAffiliateRewardEarned"
      | "emitClaimableFundingUpdated"
      | "emitCollateralSumUpdated"
      | "emitDepositCancelled"
      | "emitDepositCreated"
      | "emitDepositExecuted"
      | "emitFundingFeesClaimed"
      | "emitInsufficientFundingFeePayment"
      | "emitOpenInterestInTokensUpdated"
      | "emitOpenInterestUpdated"
      | "emitOraclePriceUpdated"
      | "emitOrderCancelled"
      | "emitOrderCreated"
      | "emitOrderExecuted"
      | "emitOrderFrozen"
      | "emitOrderUpdated"
      | "emitPoolAmountUpdated"
      | "emitPositionDecrease"
      | "emitPositionFeesCollected"
      | "emitPositionImpactPoolAmountUpdated"
      | "emitPositionIncrease"
      | "emitSwapFeesCollected"
      | "emitSwapImpactPoolAmountUpdated"
      | "emitTraderReferralDiscountApplied"
      | "emitWithdrawalCancelled"
      | "emitWithdrawalCreated"
      | "emitWithdrawalExecuted"
      | "gov"
      | "log1"
      | "log2"
      | "log3"
      | "log4"
      | "roleStore"
      | "setGov"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "emitAdlStateUpdated",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitAffiliateRewardClaimed",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitAffiliateRewardEarned",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitClaimableFundingUpdated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitCollateralSumUpdated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitDepositCancelled",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitDepositCreated",
    values: [PromiseOrValue<BytesLike>, Deposit.PropsStruct]
  ): string;
  encodeFunctionData(functionFragment: "emitDepositExecuted", values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: "emitFundingFeesClaimed",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitInsufficientFundingFeePayment",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitOpenInterestInTokensUpdated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitOpenInterestUpdated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitOraclePriceUpdated",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitOrderCancelled",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitOrderCreated",
    values: [PromiseOrValue<BytesLike>, Order.PropsStruct]
  ): string;
  encodeFunctionData(functionFragment: "emitOrderExecuted", values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: "emitOrderFrozen",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitOrderUpdated",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitPoolAmountUpdated",
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitPositionDecrease",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitPositionFeesCollected",
    values: [PromiseOrValue<boolean>, PositionPricingUtils.PositionFeesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "emitPositionImpactPoolAmountUpdated",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitPositionIncrease",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitSwapFeesCollected",
    values: [PromiseOrValue<BytesLike>, SwapPricingUtils.SwapFeesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "emitSwapImpactPoolAmountUpdated",
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitTraderReferralDiscountApplied",
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitWithdrawalCancelled",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "emitWithdrawalCreated",
    values: [PromiseOrValue<BytesLike>, Withdrawal.PropsStruct]
  ): string;
  encodeFunctionData(functionFragment: "emitWithdrawalExecuted", values: [PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(functionFragment: "gov", values?: undefined): string;
  encodeFunctionData(functionFragment: "log1", values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]): string;
  encodeFunctionData(
    functionFragment: "log2",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "log3",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "log4",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "roleStore", values?: undefined): string;
  encodeFunctionData(functionFragment: "setGov", values: [PromiseOrValue<string>]): string;

  decodeFunctionResult(functionFragment: "emitAdlStateUpdated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitAffiliateRewardClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitAffiliateRewardEarned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitClaimableFundingUpdated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitCollateralSumUpdated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitDepositCancelled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitDepositCreated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitDepositExecuted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitFundingFeesClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitInsufficientFundingFeePayment", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitOpenInterestInTokensUpdated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitOpenInterestUpdated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitOraclePriceUpdated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitOrderCancelled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitOrderCreated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitOrderExecuted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitOrderFrozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitOrderUpdated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitPoolAmountUpdated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitPositionDecrease", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitPositionFeesCollected", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitPositionImpactPoolAmountUpdated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitPositionIncrease", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitSwapFeesCollected", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitSwapImpactPoolAmountUpdated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitTraderReferralDiscountApplied", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitWithdrawalCancelled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitWithdrawalCreated", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "emitWithdrawalExecuted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gov", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "log1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "log2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "log3", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "log4", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "roleStore", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setGov", data: BytesLike): Result;

  events: {
    "AdlStateUpdated(int256,uint256,bool)": EventFragment;
    "AffiliateRewardClaimed(address,address,address,address,uint256)": EventFragment;
    "AffiliateRewardEarned(address,address,address,address,uint256)": EventFragment;
    "ClaimableFundingUpdated(address,address,address,uint256,uint256)": EventFragment;
    "CollateralSumUpdated(address,address,bool,int256,uint256)": EventFragment;
    "DepositCancelled(bytes32,bytes)": EventFragment;
    "DepositCreated(bytes32,tuple)": EventFragment;
    "DepositExecuted(bytes32)": EventFragment;
    "FundingFeesClaimed(address,address,address,address,uint256)": EventFragment;
    "InsufficientFundingFeePayment(uint256,uint256)": EventFragment;
    "OpenInterestInTokensUpdated(address,address,bool,int256,uint256)": EventFragment;
    "OpenInterestUpdated(address,address,bool,int256,uint256)": EventFragment;
    "OraclePriceUpdated(address,uint256,uint256,bool,bool)": EventFragment;
    "OrderCancelled(bytes32,string)": EventFragment;
    "OrderCreated(bytes32,tuple)": EventFragment;
    "OrderExecuted(bytes32)": EventFragment;
    "OrderFrozen(bytes32,string)": EventFragment;
    "OrderUpdated(bytes32,uint256,uint256,uint256)": EventFragment;
    "PoolAmountUpdated(address,address,int256,uint256)": EventFragment;
    "PositionDecrease(bytes32,address,address,address,bool,uint256,uint256,int256,int256,int256,int256,uint256)": EventFragment;
    "PositionFeesCollected(bool,tuple)": EventFragment;
    "PositionImpactPoolAmountUpdated(address,int256,uint256)": EventFragment;
    "PositionIncrease(bytes32,address,address,address,bool,uint256,uint256,int256)": EventFragment;
    "SetGov(address,address)": EventFragment;
    "SwapFeesCollected(bytes32,tuple)": EventFragment;
    "SwapImpactPoolAmountUpdated(address,address,int256,uint256)": EventFragment;
    "TraderReferralDiscountApplied(address,address,address,uint256)": EventFragment;
    "WithdrawalCancelled(bytes32,bytes)": EventFragment;
    "WithdrawalCreated(bytes32,tuple)": EventFragment;
    "WithdrawalExecuted(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdlStateUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AffiliateRewardClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AffiliateRewardEarned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimableFundingUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CollateralSumUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DepositExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingFeesClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsufficientFundingFeePayment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenInterestInTokensUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OpenInterestUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OraclePriceUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderFrozen"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OrderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAmountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionDecrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionFeesCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionImpactPoolAmountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PositionIncrease"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGov"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapFeesCollected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapImpactPoolAmountUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TraderReferralDiscountApplied"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawalExecuted"): EventFragment;
}

export interface AdlStateUpdatedEventObject {
  pnlToPoolFactor: BigNumber;
  maxPnlFactor: BigNumber;
  shouldEnableAdl: boolean;
}
export type AdlStateUpdatedEvent = TypedEvent<[BigNumber, BigNumber, boolean], AdlStateUpdatedEventObject>;

export type AdlStateUpdatedEventFilter = TypedEventFilter<AdlStateUpdatedEvent>;

export interface AffiliateRewardClaimedEventObject {
  market: string;
  token: string;
  account: string;
  receiver: string;
  amount: BigNumber;
}
export type AffiliateRewardClaimedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  AffiliateRewardClaimedEventObject
>;

export type AffiliateRewardClaimedEventFilter = TypedEventFilter<AffiliateRewardClaimedEvent>;

export interface AffiliateRewardEarnedEventObject {
  market: string;
  token: string;
  affiliate: string;
  trader: string;
  amount: BigNumber;
}
export type AffiliateRewardEarnedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  AffiliateRewardEarnedEventObject
>;

export type AffiliateRewardEarnedEventFilter = TypedEventFilter<AffiliateRewardEarnedEvent>;

export interface ClaimableFundingUpdatedEventObject {
  market: string;
  token: string;
  account: string;
  delta: BigNumber;
  nextValue: BigNumber;
}
export type ClaimableFundingUpdatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber],
  ClaimableFundingUpdatedEventObject
>;

export type ClaimableFundingUpdatedEventFilter = TypedEventFilter<ClaimableFundingUpdatedEvent>;

export interface CollateralSumUpdatedEventObject {
  market: string;
  collateralToken: string;
  isLong: boolean;
  delta: BigNumber;
  nextValue: BigNumber;
}
export type CollateralSumUpdatedEvent = TypedEvent<
  [string, string, boolean, BigNumber, BigNumber],
  CollateralSumUpdatedEventObject
>;

export type CollateralSumUpdatedEventFilter = TypedEventFilter<CollateralSumUpdatedEvent>;

export interface DepositCancelledEventObject {
  key: string;
  reason: string;
}
export type DepositCancelledEvent = TypedEvent<[string, string], DepositCancelledEventObject>;

export type DepositCancelledEventFilter = TypedEventFilter<DepositCancelledEvent>;

export interface DepositCreatedEventObject {
  key: string;
  deposit: Deposit.PropsStructOutput;
}
export type DepositCreatedEvent = TypedEvent<[string, Deposit.PropsStructOutput], DepositCreatedEventObject>;

export type DepositCreatedEventFilter = TypedEventFilter<DepositCreatedEvent>;

export interface DepositExecutedEventObject {
  key: string;
}
export type DepositExecutedEvent = TypedEvent<[string], DepositExecutedEventObject>;

export type DepositExecutedEventFilter = TypedEventFilter<DepositExecutedEvent>;

export interface FundingFeesClaimedEventObject {
  market: string;
  token: string;
  account: string;
  receiver: string;
  amount: BigNumber;
}
export type FundingFeesClaimedEvent = TypedEvent<
  [string, string, string, string, BigNumber],
  FundingFeesClaimedEventObject
>;

export type FundingFeesClaimedEventFilter = TypedEventFilter<FundingFeesClaimedEvent>;

export interface InsufficientFundingFeePaymentEventObject {
  fundingFeeAmount: BigNumber;
  collateralAmount: BigNumber;
}
export type InsufficientFundingFeePaymentEvent = TypedEvent<
  [BigNumber, BigNumber],
  InsufficientFundingFeePaymentEventObject
>;

export type InsufficientFundingFeePaymentEventFilter = TypedEventFilter<InsufficientFundingFeePaymentEvent>;

export interface OpenInterestInTokensUpdatedEventObject {
  market: string;
  collateralToken: string;
  isLong: boolean;
  delta: BigNumber;
  nextValue: BigNumber;
}
export type OpenInterestInTokensUpdatedEvent = TypedEvent<
  [string, string, boolean, BigNumber, BigNumber],
  OpenInterestInTokensUpdatedEventObject
>;

export type OpenInterestInTokensUpdatedEventFilter = TypedEventFilter<OpenInterestInTokensUpdatedEvent>;

export interface OpenInterestUpdatedEventObject {
  market: string;
  collateralToken: string;
  isLong: boolean;
  delta: BigNumber;
  nextValue: BigNumber;
}
export type OpenInterestUpdatedEvent = TypedEvent<
  [string, string, boolean, BigNumber, BigNumber],
  OpenInterestUpdatedEventObject
>;

export type OpenInterestUpdatedEventFilter = TypedEventFilter<OpenInterestUpdatedEvent>;

export interface OraclePriceUpdatedEventObject {
  token: string;
  minPrice: BigNumber;
  maxPrice: BigNumber;
  isPrimary: boolean;
  isPriceFeed: boolean;
}
export type OraclePriceUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean, boolean],
  OraclePriceUpdatedEventObject
>;

export type OraclePriceUpdatedEventFilter = TypedEventFilter<OraclePriceUpdatedEvent>;

export interface OrderCancelledEventObject {
  key: string;
  reason: string;
}
export type OrderCancelledEvent = TypedEvent<[string, string], OrderCancelledEventObject>;

export type OrderCancelledEventFilter = TypedEventFilter<OrderCancelledEvent>;

export interface OrderCreatedEventObject {
  key: string;
  order: Order.PropsStructOutput;
}
export type OrderCreatedEvent = TypedEvent<[string, Order.PropsStructOutput], OrderCreatedEventObject>;

export type OrderCreatedEventFilter = TypedEventFilter<OrderCreatedEvent>;

export interface OrderExecutedEventObject {
  key: string;
}
export type OrderExecutedEvent = TypedEvent<[string], OrderExecutedEventObject>;

export type OrderExecutedEventFilter = TypedEventFilter<OrderExecutedEvent>;

export interface OrderFrozenEventObject {
  key: string;
  reason: string;
}
export type OrderFrozenEvent = TypedEvent<[string, string], OrderFrozenEventObject>;

export type OrderFrozenEventFilter = TypedEventFilter<OrderFrozenEvent>;

export interface OrderUpdatedEventObject {
  key: string;
  sizeDeltaUsd: BigNumber;
  triggerPrice: BigNumber;
  acceptablePrice: BigNumber;
}
export type OrderUpdatedEvent = TypedEvent<[string, BigNumber, BigNumber, BigNumber], OrderUpdatedEventObject>;

export type OrderUpdatedEventFilter = TypedEventFilter<OrderUpdatedEvent>;

export interface PoolAmountUpdatedEventObject {
  market: string;
  token: string;
  delta: BigNumber;
  nextValue: BigNumber;
}
export type PoolAmountUpdatedEvent = TypedEvent<[string, string, BigNumber, BigNumber], PoolAmountUpdatedEventObject>;

export type PoolAmountUpdatedEventFilter = TypedEventFilter<PoolAmountUpdatedEvent>;

export interface PositionDecreaseEventObject {
  key: string;
  account: string;
  market: string;
  collateralToken: string;
  isLong: boolean;
  executionPrice: BigNumber;
  sizeDeltaInUsd: BigNumber;
  collateralDeltaAmount: BigNumber;
  positionPnlUsd: BigNumber;
  pnlAmountForPool: BigNumber;
  remainingCollateralAmount: BigNumber;
  outputAmount: BigNumber;
}
export type PositionDecreaseEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ],
  PositionDecreaseEventObject
>;

export type PositionDecreaseEventFilter = TypedEventFilter<PositionDecreaseEvent>;

export interface PositionFeesCollectedEventObject {
  isIncrease: boolean;
  fees: PositionPricingUtils.PositionFeesStructOutput;
}
export type PositionFeesCollectedEvent = TypedEvent<
  [boolean, PositionPricingUtils.PositionFeesStructOutput],
  PositionFeesCollectedEventObject
>;

export type PositionFeesCollectedEventFilter = TypedEventFilter<PositionFeesCollectedEvent>;

export interface PositionImpactPoolAmountUpdatedEventObject {
  market: string;
  delta: BigNumber;
  nextValue: BigNumber;
}
export type PositionImpactPoolAmountUpdatedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  PositionImpactPoolAmountUpdatedEventObject
>;

export type PositionImpactPoolAmountUpdatedEventFilter = TypedEventFilter<PositionImpactPoolAmountUpdatedEvent>;

export interface PositionIncreaseEventObject {
  key: string;
  account: string;
  market: string;
  collateralToken: string;
  isLong: boolean;
  executionPrice: BigNumber;
  sizeDeltaInUsd: BigNumber;
  collateralDeltaAmount: BigNumber;
}
export type PositionIncreaseEvent = TypedEvent<
  [string, string, string, string, boolean, BigNumber, BigNumber, BigNumber],
  PositionIncreaseEventObject
>;

export type PositionIncreaseEventFilter = TypedEventFilter<PositionIncreaseEvent>;

export interface SetGovEventObject {
  prevGov: string;
  nextGov: string;
}
export type SetGovEvent = TypedEvent<[string, string], SetGovEventObject>;

export type SetGovEventFilter = TypedEventFilter<SetGovEvent>;

export interface SwapFeesCollectedEventObject {
  action: string;
  fees: SwapPricingUtils.SwapFeesStructOutput;
}
export type SwapFeesCollectedEvent = TypedEvent<
  [string, SwapPricingUtils.SwapFeesStructOutput],
  SwapFeesCollectedEventObject
>;

export type SwapFeesCollectedEventFilter = TypedEventFilter<SwapFeesCollectedEvent>;

export interface SwapImpactPoolAmountUpdatedEventObject {
  market: string;
  token: string;
  delta: BigNumber;
  nextValue: BigNumber;
}
export type SwapImpactPoolAmountUpdatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  SwapImpactPoolAmountUpdatedEventObject
>;

export type SwapImpactPoolAmountUpdatedEventFilter = TypedEventFilter<SwapImpactPoolAmountUpdatedEvent>;

export interface TraderReferralDiscountAppliedEventObject {
  market: string;
  token: string;
  trader: string;
  amount: BigNumber;
}
export type TraderReferralDiscountAppliedEvent = TypedEvent<
  [string, string, string, BigNumber],
  TraderReferralDiscountAppliedEventObject
>;

export type TraderReferralDiscountAppliedEventFilter = TypedEventFilter<TraderReferralDiscountAppliedEvent>;

export interface WithdrawalCancelledEventObject {
  key: string;
  reason: string;
}
export type WithdrawalCancelledEvent = TypedEvent<[string, string], WithdrawalCancelledEventObject>;

export type WithdrawalCancelledEventFilter = TypedEventFilter<WithdrawalCancelledEvent>;

export interface WithdrawalCreatedEventObject {
  key: string;
  withdrawal: Withdrawal.PropsStructOutput;
}
export type WithdrawalCreatedEvent = TypedEvent<[string, Withdrawal.PropsStructOutput], WithdrawalCreatedEventObject>;

export type WithdrawalCreatedEventFilter = TypedEventFilter<WithdrawalCreatedEvent>;

export interface WithdrawalExecutedEventObject {
  key: string;
}
export type WithdrawalExecutedEvent = TypedEvent<[string], WithdrawalExecutedEventObject>;

export type WithdrawalExecutedEventFilter = TypedEventFilter<WithdrawalExecutedEvent>;

export interface EventEmitter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EventEmitterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    emitAdlStateUpdated(
      pnlToPoolFactor: PromiseOrValue<BigNumberish>,
      maxPnlFactor: PromiseOrValue<BigNumberish>,
      shouldEnableAdl: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitAffiliateRewardClaimed(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitAffiliateRewardEarned(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      affiliate: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitClaimableFundingUpdated(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitCollateralSumUpdated(
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitDepositCancelled(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitDepositCreated(
      key: PromiseOrValue<BytesLike>,
      deposit: Deposit.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitDepositExecuted(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitFundingFeesClaimed(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitInsufficientFundingFeePayment(
      fundingFeeAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitOpenInterestInTokensUpdated(
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitOpenInterestUpdated(
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitOraclePriceUpdated(
      token: PromiseOrValue<string>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      isPrimary: PromiseOrValue<boolean>,
      isPriceFeed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitOrderCancelled(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitOrderCreated(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitOrderExecuted(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitOrderFrozen(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitOrderUpdated(
      key: PromiseOrValue<BytesLike>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      triggerPrice: PromiseOrValue<BigNumberish>,
      acceptablePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitPoolAmountUpdated(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitPositionDecrease(
      key: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      executionPrice: PromiseOrValue<BigNumberish>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      collateralDeltaAmount: PromiseOrValue<BigNumberish>,
      positionPnlUsd: PromiseOrValue<BigNumberish>,
      pnlAmountForPool: PromiseOrValue<BigNumberish>,
      remainingCollateralAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitPositionFeesCollected(
      isIncrease: PromiseOrValue<boolean>,
      fees: PositionPricingUtils.PositionFeesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitPositionImpactPoolAmountUpdated(
      market: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitPositionIncrease(
      key: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      executionPrice: PromiseOrValue<BigNumberish>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      collateralDeltaAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitSwapFeesCollected(
      action: PromiseOrValue<BytesLike>,
      fees: SwapPricingUtils.SwapFeesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitSwapImpactPoolAmountUpdated(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitTraderReferralDiscountApplied(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitWithdrawalCancelled(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitWithdrawalCreated(
      key: PromiseOrValue<BytesLike>,
      withdrawal: Withdrawal.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitWithdrawalExecuted(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gov(overrides?: CallOverrides): Promise<[string]>;

    log1(
      topic1: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    log2(
      topic1: PromiseOrValue<BytesLike>,
      topic2: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    log3(
      topic1: PromiseOrValue<BytesLike>,
      topic2: PromiseOrValue<BytesLike>,
      topic3: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    log4(
      topic1: PromiseOrValue<BytesLike>,
      topic2: PromiseOrValue<BytesLike>,
      topic3: PromiseOrValue<BytesLike>,
      topic4: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    roleStore(overrides?: CallOverrides): Promise<[string]>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  emitAdlStateUpdated(
    pnlToPoolFactor: PromiseOrValue<BigNumberish>,
    maxPnlFactor: PromiseOrValue<BigNumberish>,
    shouldEnableAdl: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitAffiliateRewardClaimed(
    market: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitAffiliateRewardEarned(
    market: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    affiliate: PromiseOrValue<string>,
    trader: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitClaimableFundingUpdated(
    market: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    delta: PromiseOrValue<BigNumberish>,
    nextValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitCollateralSumUpdated(
    market: PromiseOrValue<string>,
    collateralToken: PromiseOrValue<string>,
    isLong: PromiseOrValue<boolean>,
    delta: PromiseOrValue<BigNumberish>,
    nextValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitDepositCancelled(
    key: PromiseOrValue<BytesLike>,
    reason: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitDepositCreated(
    key: PromiseOrValue<BytesLike>,
    deposit: Deposit.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitDepositExecuted(
    key: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitFundingFeesClaimed(
    market: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    receiver: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitInsufficientFundingFeePayment(
    fundingFeeAmount: PromiseOrValue<BigNumberish>,
    collateralAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitOpenInterestInTokensUpdated(
    market: PromiseOrValue<string>,
    collateralToken: PromiseOrValue<string>,
    isLong: PromiseOrValue<boolean>,
    delta: PromiseOrValue<BigNumberish>,
    nextValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitOpenInterestUpdated(
    market: PromiseOrValue<string>,
    collateralToken: PromiseOrValue<string>,
    isLong: PromiseOrValue<boolean>,
    delta: PromiseOrValue<BigNumberish>,
    nextValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitOraclePriceUpdated(
    token: PromiseOrValue<string>,
    minPrice: PromiseOrValue<BigNumberish>,
    maxPrice: PromiseOrValue<BigNumberish>,
    isPrimary: PromiseOrValue<boolean>,
    isPriceFeed: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitOrderCancelled(
    key: PromiseOrValue<BytesLike>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitOrderCreated(
    key: PromiseOrValue<BytesLike>,
    order: Order.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitOrderExecuted(
    key: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitOrderFrozen(
    key: PromiseOrValue<BytesLike>,
    reason: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitOrderUpdated(
    key: PromiseOrValue<BytesLike>,
    sizeDeltaUsd: PromiseOrValue<BigNumberish>,
    triggerPrice: PromiseOrValue<BigNumberish>,
    acceptablePrice: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitPoolAmountUpdated(
    market: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    delta: PromiseOrValue<BigNumberish>,
    nextValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitPositionDecrease(
    key: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    collateralToken: PromiseOrValue<string>,
    isLong: PromiseOrValue<boolean>,
    executionPrice: PromiseOrValue<BigNumberish>,
    sizeDeltaUsd: PromiseOrValue<BigNumberish>,
    collateralDeltaAmount: PromiseOrValue<BigNumberish>,
    positionPnlUsd: PromiseOrValue<BigNumberish>,
    pnlAmountForPool: PromiseOrValue<BigNumberish>,
    remainingCollateralAmount: PromiseOrValue<BigNumberish>,
    outputAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitPositionFeesCollected(
    isIncrease: PromiseOrValue<boolean>,
    fees: PositionPricingUtils.PositionFeesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitPositionImpactPoolAmountUpdated(
    market: PromiseOrValue<string>,
    delta: PromiseOrValue<BigNumberish>,
    nextValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitPositionIncrease(
    key: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    collateralToken: PromiseOrValue<string>,
    isLong: PromiseOrValue<boolean>,
    executionPrice: PromiseOrValue<BigNumberish>,
    sizeDeltaUsd: PromiseOrValue<BigNumberish>,
    collateralDeltaAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitSwapFeesCollected(
    action: PromiseOrValue<BytesLike>,
    fees: SwapPricingUtils.SwapFeesStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitSwapImpactPoolAmountUpdated(
    market: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    delta: PromiseOrValue<BigNumberish>,
    nextValue: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitTraderReferralDiscountApplied(
    market: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    trader: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitWithdrawalCancelled(
    key: PromiseOrValue<BytesLike>,
    reason: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitWithdrawalCreated(
    key: PromiseOrValue<BytesLike>,
    withdrawal: Withdrawal.PropsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitWithdrawalExecuted(
    key: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gov(overrides?: CallOverrides): Promise<string>;

  log1(
    topic1: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  log2(
    topic1: PromiseOrValue<BytesLike>,
    topic2: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  log3(
    topic1: PromiseOrValue<BytesLike>,
    topic2: PromiseOrValue<BytesLike>,
    topic3: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  log4(
    topic1: PromiseOrValue<BytesLike>,
    topic2: PromiseOrValue<BytesLike>,
    topic3: PromiseOrValue<BytesLike>,
    topic4: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  roleStore(overrides?: CallOverrides): Promise<string>;

  setGov(
    _gov: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    emitAdlStateUpdated(
      pnlToPoolFactor: PromiseOrValue<BigNumberish>,
      maxPnlFactor: PromiseOrValue<BigNumberish>,
      shouldEnableAdl: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitAffiliateRewardClaimed(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitAffiliateRewardEarned(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      affiliate: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitClaimableFundingUpdated(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitCollateralSumUpdated(
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitDepositCancelled(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitDepositCreated(
      key: PromiseOrValue<BytesLike>,
      deposit: Deposit.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emitDepositExecuted(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    emitFundingFeesClaimed(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitInsufficientFundingFeePayment(
      fundingFeeAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitOpenInterestInTokensUpdated(
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitOpenInterestUpdated(
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitOraclePriceUpdated(
      token: PromiseOrValue<string>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      isPrimary: PromiseOrValue<boolean>,
      isPriceFeed: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitOrderCancelled(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitOrderCreated(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emitOrderExecuted(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    emitOrderFrozen(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitOrderUpdated(
      key: PromiseOrValue<BytesLike>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      triggerPrice: PromiseOrValue<BigNumberish>,
      acceptablePrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitPoolAmountUpdated(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitPositionDecrease(
      key: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      executionPrice: PromiseOrValue<BigNumberish>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      collateralDeltaAmount: PromiseOrValue<BigNumberish>,
      positionPnlUsd: PromiseOrValue<BigNumberish>,
      pnlAmountForPool: PromiseOrValue<BigNumberish>,
      remainingCollateralAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitPositionFeesCollected(
      isIncrease: PromiseOrValue<boolean>,
      fees: PositionPricingUtils.PositionFeesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emitPositionImpactPoolAmountUpdated(
      market: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitPositionIncrease(
      key: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      executionPrice: PromiseOrValue<BigNumberish>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      collateralDeltaAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitSwapFeesCollected(
      action: PromiseOrValue<BytesLike>,
      fees: SwapPricingUtils.SwapFeesStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emitSwapImpactPoolAmountUpdated(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitTraderReferralDiscountApplied(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitWithdrawalCancelled(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitWithdrawalCreated(
      key: PromiseOrValue<BytesLike>,
      withdrawal: Withdrawal.PropsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    emitWithdrawalExecuted(key: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    gov(overrides?: CallOverrides): Promise<string>;

    log1(topic1: PromiseOrValue<BytesLike>, data: PromiseOrValue<BytesLike>, overrides?: CallOverrides): Promise<void>;

    log2(
      topic1: PromiseOrValue<BytesLike>,
      topic2: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    log3(
      topic1: PromiseOrValue<BytesLike>,
      topic2: PromiseOrValue<BytesLike>,
      topic3: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    log4(
      topic1: PromiseOrValue<BytesLike>,
      topic2: PromiseOrValue<BytesLike>,
      topic3: PromiseOrValue<BytesLike>,
      topic4: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    roleStore(overrides?: CallOverrides): Promise<string>;

    setGov(_gov: PromiseOrValue<string>, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdlStateUpdated(int256,uint256,bool)"(
      pnlToPoolFactor?: null,
      maxPnlFactor?: null,
      shouldEnableAdl?: null
    ): AdlStateUpdatedEventFilter;
    AdlStateUpdated(pnlToPoolFactor?: null, maxPnlFactor?: null, shouldEnableAdl?: null): AdlStateUpdatedEventFilter;

    "AffiliateRewardClaimed(address,address,address,address,uint256)"(
      market?: null,
      token?: null,
      account?: null,
      receiver?: null,
      amount?: null
    ): AffiliateRewardClaimedEventFilter;
    AffiliateRewardClaimed(
      market?: null,
      token?: null,
      account?: null,
      receiver?: null,
      amount?: null
    ): AffiliateRewardClaimedEventFilter;

    "AffiliateRewardEarned(address,address,address,address,uint256)"(
      market?: null,
      token?: null,
      affiliate?: null,
      trader?: null,
      amount?: null
    ): AffiliateRewardEarnedEventFilter;
    AffiliateRewardEarned(
      market?: null,
      token?: null,
      affiliate?: null,
      trader?: null,
      amount?: null
    ): AffiliateRewardEarnedEventFilter;

    "ClaimableFundingUpdated(address,address,address,uint256,uint256)"(
      market?: null,
      token?: null,
      account?: null,
      delta?: null,
      nextValue?: null
    ): ClaimableFundingUpdatedEventFilter;
    ClaimableFundingUpdated(
      market?: null,
      token?: null,
      account?: null,
      delta?: null,
      nextValue?: null
    ): ClaimableFundingUpdatedEventFilter;

    "CollateralSumUpdated(address,address,bool,int256,uint256)"(
      market?: null,
      collateralToken?: null,
      isLong?: null,
      delta?: null,
      nextValue?: null
    ): CollateralSumUpdatedEventFilter;
    CollateralSumUpdated(
      market?: null,
      collateralToken?: null,
      isLong?: null,
      delta?: null,
      nextValue?: null
    ): CollateralSumUpdatedEventFilter;

    "DepositCancelled(bytes32,bytes)"(key?: null, reason?: null): DepositCancelledEventFilter;
    DepositCancelled(key?: null, reason?: null): DepositCancelledEventFilter;

    "DepositCreated(bytes32,tuple)"(key?: null, deposit?: null): DepositCreatedEventFilter;
    DepositCreated(key?: null, deposit?: null): DepositCreatedEventFilter;

    "DepositExecuted(bytes32)"(key?: null): DepositExecutedEventFilter;
    DepositExecuted(key?: null): DepositExecutedEventFilter;

    "FundingFeesClaimed(address,address,address,address,uint256)"(
      market?: null,
      token?: null,
      account?: null,
      receiver?: null,
      amount?: null
    ): FundingFeesClaimedEventFilter;
    FundingFeesClaimed(
      market?: null,
      token?: null,
      account?: null,
      receiver?: null,
      amount?: null
    ): FundingFeesClaimedEventFilter;

    "InsufficientFundingFeePayment(uint256,uint256)"(
      fundingFeeAmount?: null,
      collateralAmount?: null
    ): InsufficientFundingFeePaymentEventFilter;
    InsufficientFundingFeePayment(
      fundingFeeAmount?: null,
      collateralAmount?: null
    ): InsufficientFundingFeePaymentEventFilter;

    "OpenInterestInTokensUpdated(address,address,bool,int256,uint256)"(
      market?: null,
      collateralToken?: null,
      isLong?: null,
      delta?: null,
      nextValue?: null
    ): OpenInterestInTokensUpdatedEventFilter;
    OpenInterestInTokensUpdated(
      market?: null,
      collateralToken?: null,
      isLong?: null,
      delta?: null,
      nextValue?: null
    ): OpenInterestInTokensUpdatedEventFilter;

    "OpenInterestUpdated(address,address,bool,int256,uint256)"(
      market?: null,
      collateralToken?: null,
      isLong?: null,
      delta?: null,
      nextValue?: null
    ): OpenInterestUpdatedEventFilter;
    OpenInterestUpdated(
      market?: null,
      collateralToken?: null,
      isLong?: null,
      delta?: null,
      nextValue?: null
    ): OpenInterestUpdatedEventFilter;

    "OraclePriceUpdated(address,uint256,uint256,bool,bool)"(
      token?: null,
      minPrice?: null,
      maxPrice?: null,
      isPrimary?: null,
      isPriceFeed?: null
    ): OraclePriceUpdatedEventFilter;
    OraclePriceUpdated(
      token?: null,
      minPrice?: null,
      maxPrice?: null,
      isPrimary?: null,
      isPriceFeed?: null
    ): OraclePriceUpdatedEventFilter;

    "OrderCancelled(bytes32,string)"(key?: null, reason?: null): OrderCancelledEventFilter;
    OrderCancelled(key?: null, reason?: null): OrderCancelledEventFilter;

    "OrderCreated(bytes32,tuple)"(key?: null, order?: null): OrderCreatedEventFilter;
    OrderCreated(key?: null, order?: null): OrderCreatedEventFilter;

    "OrderExecuted(bytes32)"(key?: null): OrderExecutedEventFilter;
    OrderExecuted(key?: null): OrderExecutedEventFilter;

    "OrderFrozen(bytes32,string)"(key?: null, reason?: null): OrderFrozenEventFilter;
    OrderFrozen(key?: null, reason?: null): OrderFrozenEventFilter;

    "OrderUpdated(bytes32,uint256,uint256,uint256)"(
      key?: null,
      sizeDeltaUsd?: null,
      triggerPrice?: null,
      acceptablePrice?: null
    ): OrderUpdatedEventFilter;
    OrderUpdated(key?: null, sizeDeltaUsd?: null, triggerPrice?: null, acceptablePrice?: null): OrderUpdatedEventFilter;

    "PoolAmountUpdated(address,address,int256,uint256)"(
      market?: null,
      token?: null,
      delta?: null,
      nextValue?: null
    ): PoolAmountUpdatedEventFilter;
    PoolAmountUpdated(market?: null, token?: null, delta?: null, nextValue?: null): PoolAmountUpdatedEventFilter;

    "PositionDecrease(bytes32,address,address,address,bool,uint256,uint256,int256,int256,int256,int256,uint256)"(
      key?: null,
      account?: PromiseOrValue<string> | null,
      market?: PromiseOrValue<string> | null,
      collateralToken?: null,
      isLong?: null,
      executionPrice?: null,
      sizeDeltaInUsd?: null,
      collateralDeltaAmount?: null,
      positionPnlUsd?: null,
      pnlAmountForPool?: null,
      remainingCollateralAmount?: null,
      outputAmount?: null
    ): PositionDecreaseEventFilter;
    PositionDecrease(
      key?: null,
      account?: PromiseOrValue<string> | null,
      market?: PromiseOrValue<string> | null,
      collateralToken?: null,
      isLong?: null,
      executionPrice?: null,
      sizeDeltaInUsd?: null,
      collateralDeltaAmount?: null,
      positionPnlUsd?: null,
      pnlAmountForPool?: null,
      remainingCollateralAmount?: null,
      outputAmount?: null
    ): PositionDecreaseEventFilter;

    "PositionFeesCollected(bool,tuple)"(isIncrease?: null, fees?: null): PositionFeesCollectedEventFilter;
    PositionFeesCollected(isIncrease?: null, fees?: null): PositionFeesCollectedEventFilter;

    "PositionImpactPoolAmountUpdated(address,int256,uint256)"(
      market?: null,
      delta?: null,
      nextValue?: null
    ): PositionImpactPoolAmountUpdatedEventFilter;
    PositionImpactPoolAmountUpdated(
      market?: null,
      delta?: null,
      nextValue?: null
    ): PositionImpactPoolAmountUpdatedEventFilter;

    "PositionIncrease(bytes32,address,address,address,bool,uint256,uint256,int256)"(
      key?: null,
      account?: PromiseOrValue<string> | null,
      market?: PromiseOrValue<string> | null,
      collateralToken?: null,
      isLong?: null,
      executionPrice?: null,
      sizeDeltaInUsd?: null,
      collateralDeltaAmount?: null
    ): PositionIncreaseEventFilter;
    PositionIncrease(
      key?: null,
      account?: PromiseOrValue<string> | null,
      market?: PromiseOrValue<string> | null,
      collateralToken?: null,
      isLong?: null,
      executionPrice?: null,
      sizeDeltaInUsd?: null,
      collateralDeltaAmount?: null
    ): PositionIncreaseEventFilter;

    "SetGov(address,address)"(prevGov?: null, nextGov?: null): SetGovEventFilter;
    SetGov(prevGov?: null, nextGov?: null): SetGovEventFilter;

    "SwapFeesCollected(bytes32,tuple)"(action?: null, fees?: null): SwapFeesCollectedEventFilter;
    SwapFeesCollected(action?: null, fees?: null): SwapFeesCollectedEventFilter;

    "SwapImpactPoolAmountUpdated(address,address,int256,uint256)"(
      market?: null,
      token?: null,
      delta?: null,
      nextValue?: null
    ): SwapImpactPoolAmountUpdatedEventFilter;
    SwapImpactPoolAmountUpdated(
      market?: null,
      token?: null,
      delta?: null,
      nextValue?: null
    ): SwapImpactPoolAmountUpdatedEventFilter;

    "TraderReferralDiscountApplied(address,address,address,uint256)"(
      market?: null,
      token?: null,
      trader?: null,
      amount?: null
    ): TraderReferralDiscountAppliedEventFilter;
    TraderReferralDiscountApplied(
      market?: null,
      token?: null,
      trader?: null,
      amount?: null
    ): TraderReferralDiscountAppliedEventFilter;

    "WithdrawalCancelled(bytes32,bytes)"(key?: null, reason?: null): WithdrawalCancelledEventFilter;
    WithdrawalCancelled(key?: null, reason?: null): WithdrawalCancelledEventFilter;

    "WithdrawalCreated(bytes32,tuple)"(key?: null, withdrawal?: null): WithdrawalCreatedEventFilter;
    WithdrawalCreated(key?: null, withdrawal?: null): WithdrawalCreatedEventFilter;

    "WithdrawalExecuted(bytes32)"(key?: null): WithdrawalExecutedEventFilter;
    WithdrawalExecuted(key?: null): WithdrawalExecutedEventFilter;
  };

  estimateGas: {
    emitAdlStateUpdated(
      pnlToPoolFactor: PromiseOrValue<BigNumberish>,
      maxPnlFactor: PromiseOrValue<BigNumberish>,
      shouldEnableAdl: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitAffiliateRewardClaimed(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitAffiliateRewardEarned(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      affiliate: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitClaimableFundingUpdated(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitCollateralSumUpdated(
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitDepositCancelled(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitDepositCreated(
      key: PromiseOrValue<BytesLike>,
      deposit: Deposit.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitDepositExecuted(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitFundingFeesClaimed(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitInsufficientFundingFeePayment(
      fundingFeeAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitOpenInterestInTokensUpdated(
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitOpenInterestUpdated(
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitOraclePriceUpdated(
      token: PromiseOrValue<string>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      isPrimary: PromiseOrValue<boolean>,
      isPriceFeed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitOrderCancelled(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitOrderCreated(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitOrderExecuted(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitOrderFrozen(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitOrderUpdated(
      key: PromiseOrValue<BytesLike>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      triggerPrice: PromiseOrValue<BigNumberish>,
      acceptablePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitPoolAmountUpdated(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitPositionDecrease(
      key: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      executionPrice: PromiseOrValue<BigNumberish>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      collateralDeltaAmount: PromiseOrValue<BigNumberish>,
      positionPnlUsd: PromiseOrValue<BigNumberish>,
      pnlAmountForPool: PromiseOrValue<BigNumberish>,
      remainingCollateralAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitPositionFeesCollected(
      isIncrease: PromiseOrValue<boolean>,
      fees: PositionPricingUtils.PositionFeesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitPositionImpactPoolAmountUpdated(
      market: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitPositionIncrease(
      key: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      executionPrice: PromiseOrValue<BigNumberish>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      collateralDeltaAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitSwapFeesCollected(
      action: PromiseOrValue<BytesLike>,
      fees: SwapPricingUtils.SwapFeesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitSwapImpactPoolAmountUpdated(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitTraderReferralDiscountApplied(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitWithdrawalCancelled(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitWithdrawalCreated(
      key: PromiseOrValue<BytesLike>,
      withdrawal: Withdrawal.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitWithdrawalExecuted(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gov(overrides?: CallOverrides): Promise<BigNumber>;

    log1(
      topic1: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    log2(
      topic1: PromiseOrValue<BytesLike>,
      topic2: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    log3(
      topic1: PromiseOrValue<BytesLike>,
      topic2: PromiseOrValue<BytesLike>,
      topic3: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    log4(
      topic1: PromiseOrValue<BytesLike>,
      topic2: PromiseOrValue<BytesLike>,
      topic3: PromiseOrValue<BytesLike>,
      topic4: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    roleStore(overrides?: CallOverrides): Promise<BigNumber>;

    setGov(_gov: PromiseOrValue<string>, overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<BigNumber>;
  };

  populateTransaction: {
    emitAdlStateUpdated(
      pnlToPoolFactor: PromiseOrValue<BigNumberish>,
      maxPnlFactor: PromiseOrValue<BigNumberish>,
      shouldEnableAdl: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitAffiliateRewardClaimed(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitAffiliateRewardEarned(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      affiliate: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitClaimableFundingUpdated(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitCollateralSumUpdated(
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitDepositCancelled(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitDepositCreated(
      key: PromiseOrValue<BytesLike>,
      deposit: Deposit.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitDepositExecuted(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitFundingFeesClaimed(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      receiver: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitInsufficientFundingFeePayment(
      fundingFeeAmount: PromiseOrValue<BigNumberish>,
      collateralAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitOpenInterestInTokensUpdated(
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitOpenInterestUpdated(
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitOraclePriceUpdated(
      token: PromiseOrValue<string>,
      minPrice: PromiseOrValue<BigNumberish>,
      maxPrice: PromiseOrValue<BigNumberish>,
      isPrimary: PromiseOrValue<boolean>,
      isPriceFeed: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitOrderCancelled(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitOrderCreated(
      key: PromiseOrValue<BytesLike>,
      order: Order.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitOrderExecuted(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitOrderFrozen(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitOrderUpdated(
      key: PromiseOrValue<BytesLike>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      triggerPrice: PromiseOrValue<BigNumberish>,
      acceptablePrice: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitPoolAmountUpdated(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitPositionDecrease(
      key: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      executionPrice: PromiseOrValue<BigNumberish>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      collateralDeltaAmount: PromiseOrValue<BigNumberish>,
      positionPnlUsd: PromiseOrValue<BigNumberish>,
      pnlAmountForPool: PromiseOrValue<BigNumberish>,
      remainingCollateralAmount: PromiseOrValue<BigNumberish>,
      outputAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitPositionFeesCollected(
      isIncrease: PromiseOrValue<boolean>,
      fees: PositionPricingUtils.PositionFeesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitPositionImpactPoolAmountUpdated(
      market: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitPositionIncrease(
      key: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      collateralToken: PromiseOrValue<string>,
      isLong: PromiseOrValue<boolean>,
      executionPrice: PromiseOrValue<BigNumberish>,
      sizeDeltaUsd: PromiseOrValue<BigNumberish>,
      collateralDeltaAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitSwapFeesCollected(
      action: PromiseOrValue<BytesLike>,
      fees: SwapPricingUtils.SwapFeesStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitSwapImpactPoolAmountUpdated(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      delta: PromiseOrValue<BigNumberish>,
      nextValue: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitTraderReferralDiscountApplied(
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      trader: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitWithdrawalCancelled(
      key: PromiseOrValue<BytesLike>,
      reason: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitWithdrawalCreated(
      key: PromiseOrValue<BytesLike>,
      withdrawal: Withdrawal.PropsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitWithdrawalExecuted(
      key: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gov(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    log1(
      topic1: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    log2(
      topic1: PromiseOrValue<BytesLike>,
      topic2: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    log3(
      topic1: PromiseOrValue<BytesLike>,
      topic2: PromiseOrValue<BytesLike>,
      topic3: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    log4(
      topic1: PromiseOrValue<BytesLike>,
      topic2: PromiseOrValue<BytesLike>,
      topic3: PromiseOrValue<BytesLike>,
      topic4: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    roleStore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setGov(
      _gov: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
