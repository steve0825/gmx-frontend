/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";

export declare namespace Market {
  export type PropsStruct = {
    marketToken: PromiseOrValue<string>;
    indexToken: PromiseOrValue<string>;
    longToken: PromiseOrValue<string>;
    shortToken: PromiseOrValue<string>;
    data: PromiseOrValue<BytesLike>;
  };

  export type PropsStructOutput = [string, string, string, string, string] & {
    marketToken: string;
    indexToken: string;
    longToken: string;
    shortToken: string;
    data: string;
  };
}

export declare namespace Price {
  export type PropsStruct = {
    min: PromiseOrValue<BigNumberish>;
    max: PromiseOrValue<BigNumberish>;
  };

  export type PropsStructOutput = [BigNumber, BigNumber] & {
    min: BigNumber;
    max: BigNumber;
  };
}

export interface ReaderInterface extends utils.Interface {
  functions: {
    "getMarketTokenPrice(address,(address,address,address,address,bytes),(uint256,uint256),(uint256,uint256),(uint256,uint256),bool)": FunctionFragment;
    "getMarkets(address,uint256,uint256)": FunctionFragment;
    "getPoolAmount(address,address,address)": FunctionFragment;
    "getSwapImpactPoolAmount(address,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getMarketTokenPrice" | "getMarkets" | "getPoolAmount" | "getSwapImpactPoolAmount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getMarketTokenPrice",
    values: [
      PromiseOrValue<string>,
      Market.PropsStruct,
      Price.PropsStruct,
      Price.PropsStruct,
      Price.PropsStruct,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarkets",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPoolAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getSwapImpactPoolAmount",
    values: [PromiseOrValue<string>, PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "getMarketTokenPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMarkets", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPoolAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getSwapImpactPoolAmount", data: BytesLike): Result;

  events: {};
}

export interface Reader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReaderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getMarketTokenPrice(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMarkets(
      marketStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Market.PropsStructOutput[]]>;

    getPoolAmount(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSwapImpactPoolAmount(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  getMarketTokenPrice(
    dataStore: PromiseOrValue<string>,
    market: Market.PropsStruct,
    longTokenPrice: Price.PropsStruct,
    shortTokenPrice: Price.PropsStruct,
    indexTokenPrice: Price.PropsStruct,
    maximize: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMarkets(
    marketStore: PromiseOrValue<string>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Market.PropsStructOutput[]>;

  getPoolAmount(
    dataStore: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSwapImpactPoolAmount(
    dataStore: PromiseOrValue<string>,
    market: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    getMarketTokenPrice(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarkets(
      marketStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Market.PropsStructOutput[]>;

    getPoolAmount(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapImpactPoolAmount(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    getMarketTokenPrice(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarkets(
      marketStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPoolAmount(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSwapImpactPoolAmount(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMarketTokenPrice(
      dataStore: PromiseOrValue<string>,
      market: Market.PropsStruct,
      longTokenPrice: Price.PropsStruct,
      shortTokenPrice: Price.PropsStruct,
      indexTokenPrice: Price.PropsStruct,
      maximize: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarkets(
      marketStore: PromiseOrValue<string>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPoolAmount(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSwapImpactPoolAmount(
      dataStore: PromiseOrValue<string>,
      market: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
