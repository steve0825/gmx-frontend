/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";

export interface RoleInterface extends utils.Interface {
  functions: {
    "ADL_KEEPER()": FunctionFragment;
    "CONTROLLER()": FunctionFragment;
    "FEE_KEEPER()": FunctionFragment;
    "FROZEN_ORDER_KEEPER()": FunctionFragment;
    "LIQUIDATION_KEEPER()": FunctionFragment;
    "MARKET_KEEPER()": FunctionFragment;
    "ORDER_KEEPER()": FunctionFragment;
    "PRICING_KEEPER()": FunctionFragment;
    "ROUTER_PLUGIN()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADL_KEEPER"
      | "CONTROLLER"
      | "FEE_KEEPER"
      | "FROZEN_ORDER_KEEPER"
      | "LIQUIDATION_KEEPER"
      | "MARKET_KEEPER"
      | "ORDER_KEEPER"
      | "PRICING_KEEPER"
      | "ROUTER_PLUGIN"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ADL_KEEPER", values?: undefined): string;
  encodeFunctionData(functionFragment: "CONTROLLER", values?: undefined): string;
  encodeFunctionData(functionFragment: "FEE_KEEPER", values?: undefined): string;
  encodeFunctionData(functionFragment: "FROZEN_ORDER_KEEPER", values?: undefined): string;
  encodeFunctionData(functionFragment: "LIQUIDATION_KEEPER", values?: undefined): string;
  encodeFunctionData(functionFragment: "MARKET_KEEPER", values?: undefined): string;
  encodeFunctionData(functionFragment: "ORDER_KEEPER", values?: undefined): string;
  encodeFunctionData(functionFragment: "PRICING_KEEPER", values?: undefined): string;
  encodeFunctionData(functionFragment: "ROUTER_PLUGIN", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADL_KEEPER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "CONTROLLER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FEE_KEEPER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "FROZEN_ORDER_KEEPER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LIQUIDATION_KEEPER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MARKET_KEEPER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ORDER_KEEPER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "PRICING_KEEPER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ROUTER_PLUGIN", data: BytesLike): Result;

  events: {};
}

export interface Role extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RoleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADL_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    CONTROLLER(overrides?: CallOverrides): Promise<[string]>;

    FEE_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    FROZEN_ORDER_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    LIQUIDATION_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    MARKET_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    ORDER_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    PRICING_KEEPER(overrides?: CallOverrides): Promise<[string]>;

    ROUTER_PLUGIN(overrides?: CallOverrides): Promise<[string]>;
  };

  ADL_KEEPER(overrides?: CallOverrides): Promise<string>;

  CONTROLLER(overrides?: CallOverrides): Promise<string>;

  FEE_KEEPER(overrides?: CallOverrides): Promise<string>;

  FROZEN_ORDER_KEEPER(overrides?: CallOverrides): Promise<string>;

  LIQUIDATION_KEEPER(overrides?: CallOverrides): Promise<string>;

  MARKET_KEEPER(overrides?: CallOverrides): Promise<string>;

  ORDER_KEEPER(overrides?: CallOverrides): Promise<string>;

  PRICING_KEEPER(overrides?: CallOverrides): Promise<string>;

  ROUTER_PLUGIN(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ADL_KEEPER(overrides?: CallOverrides): Promise<string>;

    CONTROLLER(overrides?: CallOverrides): Promise<string>;

    FEE_KEEPER(overrides?: CallOverrides): Promise<string>;

    FROZEN_ORDER_KEEPER(overrides?: CallOverrides): Promise<string>;

    LIQUIDATION_KEEPER(overrides?: CallOverrides): Promise<string>;

    MARKET_KEEPER(overrides?: CallOverrides): Promise<string>;

    ORDER_KEEPER(overrides?: CallOverrides): Promise<string>;

    PRICING_KEEPER(overrides?: CallOverrides): Promise<string>;

    ROUTER_PLUGIN(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    ADL_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    CONTROLLER(overrides?: CallOverrides): Promise<BigNumber>;

    FEE_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    FROZEN_ORDER_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    LIQUIDATION_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    MARKET_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    ORDER_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    PRICING_KEEPER(overrides?: CallOverrides): Promise<BigNumber>;

    ROUTER_PLUGIN(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ADL_KEEPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    CONTROLLER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FEE_KEEPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    FROZEN_ORDER_KEEPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LIQUIDATION_KEEPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MARKET_KEEPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ORDER_KEEPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRICING_KEEPER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROUTER_PLUGIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
