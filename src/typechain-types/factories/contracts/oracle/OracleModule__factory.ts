/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { OracleModule, OracleModuleInterface } from "../../../contracts/oracle/OracleModule";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "OracleError",
    type: "event",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212205810beed7f5b3e49f7bfc503510c8691d551f3aed4ba043e553953dc77ad236d64736f6c63430008100033";

type OracleModuleConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: OracleModuleConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class OracleModule__factory extends ContractFactory {
  constructor(...args: OracleModuleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<OracleModule> {
    return super.deploy(overrides || {}) as Promise<OracleModule>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OracleModule {
    return super.attach(address) as OracleModule;
  }
  override connect(signer: Signer): OracleModule__factory {
    return super.connect(signer) as OracleModule__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleModuleInterface {
    return new utils.Interface(_abi) as OracleModuleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): OracleModule {
    return new Contract(address, _abi, signerOrProvider) as OracleModule;
  }
}
