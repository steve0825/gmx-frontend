/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { WithdrawalUtils, WithdrawalUtilsInterface } from "../../../contracts/withdrawal/WithdrawalUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
    ],
    name: "InsufficientMarketTokens",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "received",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
    ],
    name: "MinLongTokens",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "received",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "expected",
        type: "uint256",
      },
    ],
    name: "MinShortTokens",
    type: "error",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209e930adcbce1b8c40ee329ae39033039f00ed58e89970acbe988d59a7e24836064736f6c63430008100033";

type WithdrawalUtilsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: WithdrawalUtilsConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class WithdrawalUtils__factory extends ContractFactory {
  constructor(...args: WithdrawalUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<WithdrawalUtils> {
    return super.deploy(overrides || {}) as Promise<WithdrawalUtils>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): WithdrawalUtils {
    return super.attach(address) as WithdrawalUtils;
  }
  override connect(signer: Signer): WithdrawalUtils__factory {
    return super.connect(signer) as WithdrawalUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WithdrawalUtilsInterface {
    return new utils.Interface(_abi) as WithdrawalUtilsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): WithdrawalUtils {
    return new Contract(address, _abi, signerOrProvider) as WithdrawalUtils;
  }
}
