/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { FeatureUtils, FeatureUtilsInterface } from "../../../contracts/feature/FeatureUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "key",
        type: "bytes32",
      },
    ],
    name: "BlockedFeature",
    type: "error",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201e5c09793ce838fcbaecbfb9ed473badbb6396eb2fbcc53c8991ee72a871a65e64736f6c63430008100033";

type FeatureUtilsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: FeatureUtilsConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class FeatureUtils__factory extends ContractFactory {
  constructor(...args: FeatureUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<FeatureUtils> {
    return super.deploy(overrides || {}) as Promise<FeatureUtils>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FeatureUtils {
    return super.attach(address) as FeatureUtils;
  }
  override connect(signer: Signer): FeatureUtils__factory {
    return super.connect(signer) as FeatureUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeatureUtilsInterface {
    return new utils.Interface(_abi) as FeatureUtilsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FeatureUtils {
    return new Contract(address, _abi, signerOrProvider) as FeatureUtils;
  }
}
