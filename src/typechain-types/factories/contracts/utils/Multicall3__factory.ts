/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Multicall3, Multicall3Interface } from "../../../contracts/utils/Multicall3";

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes[]",
        name: "returnData",
        type: "bytes[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bool",
            name: "allowFailure",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "value",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call3Value[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "aggregate3Value",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getBasefee",
    outputs: [
      {
        internalType: "uint256",
        name: "basefee",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getChainId",
    outputs: [
      {
        internalType: "uint256",
        name: "chainid",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [
      {
        internalType: "address",
        name: "coinbase",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [
      {
        internalType: "uint256",
        name: "difficulty",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [
      {
        internalType: "uint256",
        name: "gaslimit",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "addr",
        type: "address",
      },
    ],
    name: "getEthBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "requireSuccess",
        type: "bool",
      },
      {
        components: [
          {
            internalType: "address",
            name: "target",
            type: "address",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Call[]",
        name: "calls",
        type: "tuple[]",
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
      {
        components: [
          {
            internalType: "bool",
            name: "success",
            type: "bool",
          },
          {
            internalType: "bytes",
            name: "returnData",
            type: "bytes",
          },
        ],
        internalType: "struct Multicall3.Result[]",
        name: "returnData",
        type: "tuple[]",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610c62806100206000396000f3fe6080604052600436106100c35760003560e01c80630f28c97d146100c8578063174dea71146100ea578063252dba421461010a57806327e86d6e1461012b5780633408e47014610143578063399542e9146101565780633e64a6961461017857806342cbb15c1461018b5780634d2301cc1461019e57806372425d9d146101c657806382ad56cb146101d957806386d516e8146101ec578063a8b0574e146101ff578063bce38bd71461021a578063c3077fa91461022d578063ee82ac5e14610240575b600080fd5b3480156100d457600080fd5b50425b6040519081526020015b60405180910390f35b6100fd6100f83660046108f1565b61025f565b6040516100e191906109e6565b61011d6101183660046108f1565b61043c565b6040516100e1929190610a00565b34801561013757600080fd5b504360001901406100d7565b34801561014f57600080fd5b50466100d7565b610169610164366004610a6a565b610585565b6040516100e193929190610ac3565b34801561018457600080fd5b50486100d7565b34801561019757600080fd5b50436100d7565b3480156101aa57600080fd5b506100d76101b9366004610aeb565b6001600160a01b03163190565b3480156101d257600080fd5b50446100d7565b6100fd6101e73660046108f1565b6105a0565b3480156101f857600080fd5b50456100d7565b34801561020b57600080fd5b506040514181526020016100e1565b6100fd610228366004610a6a565b610714565b61016961023b3660046108f1565b61086f565b34801561024c57600080fd5b506100d761025b366004610b14565b4090565b6060600082806001600160401b0381111561027c5761027c610b2d565b6040519080825280602002602001820160405280156102b557816020015b6102a261088e565b81526020019060019003908161029a5790505b5092503660005b828110156103e15760008582815181106102d8576102d8610b43565b602002602001015190508787838181106102f4576102f4610b43565b90506020028101906103069190610b59565b60408101359586019590935061031f6020850185610aeb565b6001600160a01b0316816103366060870187610b79565b604051610344929190610bbf565b60006040518083038185875af1925050503d8060008114610381576040519150601f19603f3d011682016040523d82523d6000602084013e610386565b606091505b5060208085019190915290151580845290850135176103d75762461bcd60e51b6000526020600452601760245276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b60445260846000fd5b50506001016102bc565b508234146104335760405162461bcd60e51b815260206004820152601a60248201527909aead8e8d2c6c2d8d8667440ecc2d8eaca40dad2e6dac2e8c6d60331b60448201526064015b60405180910390fd5b50505092915050565b43606082806001600160401b0381111561045857610458610b2d565b60405190808252806020026020018201604052801561048b57816020015b60608152602001906001900390816104765790505b5091503660005b8281101561057b5760008787838181106104ae576104ae610b43565b90506020028101906104c09190610bcf565b92506104cf6020840184610aeb565b6001600160a01b03166104e56020850185610b79565b6040516104f3929190610bbf565b6000604051808303816000865af19150503d8060008114610530576040519150601f19603f3d011682016040523d82523d6000602084013e610535565b606091505b5086848151811061054857610548610b43565b60209081029190910101529050806105725760405162461bcd60e51b815260040161042a90610be5565b50600101610492565b5050509250929050565b4380406060610595868686610714565b905093509350939050565b606081806001600160401b038111156105bb576105bb610b2d565b6040519080825280602002602001820160405280156105f457816020015b6105e161088e565b8152602001906001900390816105d95790505b5091503660005b8281101561043357600084828151811061061757610617610b43565b6020026020010151905086868381811061063357610633610b43565b90506020028101906106459190610c16565b92506106546020840184610aeb565b6001600160a01b031661066a6040850185610b79565b604051610678929190610bbf565b6000604051808303816000865af19150503d80600081146106b5576040519150601f19603f3d011682016040523d82523d6000602084013e6106ba565b606091505b50602080840191909152901515808352908401351761070b5762461bcd60e51b6000526020600452601760245276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b60445260646000fd5b506001016105fb565b606081806001600160401b0381111561072f5761072f610b2d565b60405190808252806020026020018201604052801561076857816020015b61075561088e565b81526020019060019003908161074d5790505b5091503660005b8281101561086557600084828151811061078b5761078b610b43565b602002602001015190508686838181106107a7576107a7610b43565b90506020028101906107b99190610bcf565b92506107c86020840184610aeb565b6001600160a01b03166107de6020850185610b79565b6040516107ec929190610bbf565b6000604051808303816000865af19150503d8060008114610829576040519150601f19603f3d011682016040523d82523d6000602084013e61082e565b606091505b50602083015215158152871561085c57805161085c5760405162461bcd60e51b815260040161042a90610be5565b5060010161076f565b5050509392505050565b600080606061088060018686610585565b919790965090945092505050565b60408051808201909152600081526060602082015290565b60008083601f8401126108b857600080fd5b5081356001600160401b038111156108cf57600080fd5b6020830191508360208260051b85010111156108ea57600080fd5b9250929050565b6000806020838503121561090457600080fd5b82356001600160401b0381111561091a57600080fd5b610926858286016108a6565b90969095509350505050565b6000815180845260005b818110156109585760208185018101518683018201520161093c565b506000602082860101526020601f19601f83011685010191505092915050565b600082825180855260208086019550808260051b84010181860160005b848110156109d957858303601f19018952815180511515845284015160408585018190526109c581860183610932565b9a86019a9450505090830190600101610995565b5090979650505050505050565b6020815260006109f96020830184610978565b9392505050565b600060408201848352602060408185015281855180845260608601915060608160051b870101935082870160005b82811015610a5c57605f19888703018452610a4a868351610932565b95509284019290840190600101610a2e565b509398975050505050505050565b600080600060408486031215610a7f57600080fd5b83358015158114610a8f57600080fd5b925060208401356001600160401b03811115610aaa57600080fd5b610ab6868287016108a6565b9497909650939450505050565b838152826020820152606060408201526000610ae26060830184610978565b95945050505050565b600060208284031215610afd57600080fd5b81356001600160a01b03811681146109f957600080fd5b600060208284031215610b2657600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60008235607e19833603018112610b6f57600080fd5b9190910192915050565b6000808335601e19843603018112610b9057600080fd5b8301803591506001600160401b03821115610baa57600080fd5b6020019150368190038213156108ea57600080fd5b8183823760009101908152919050565b60008235603e19833603018112610b6f57600080fd5b602080825260179082015276135d5b1d1a58d85b1b0cce8818d85b1b0819985a5b1959604a1b604082015260600190565b60008235605e19833603018112610b6f57600080fdfea264697066735822122025faf20010bc93551fbcab9b2c7134598a70a87908a42f78818beb902e68c41564736f6c63430008100033";

type Multicall3ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: Multicall3ConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class Multicall3__factory extends ContractFactory {
  constructor(...args: Multicall3ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<Multicall3> {
    return super.deploy(overrides || {}) as Promise<Multicall3>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Multicall3 {
    return super.attach(address) as Multicall3;
  }
  override connect(signer: Signer): Multicall3__factory {
    return super.connect(signer) as Multicall3__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Multicall3Interface {
    return new utils.Interface(_abi) as Multicall3Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Multicall3 {
    return new Contract(address, _abi, signerOrProvider) as Multicall3;
  }
}
