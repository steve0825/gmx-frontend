/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { GasUtils, GasUtilsInterface } from "../../../contracts/gas/GasUtils";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "minExecutionFee",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "executionFee",
        type: "uint256",
      },
    ],
    name: "InsufficientExecutionFee",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "NativeTokenTransferError",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "keeper",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "KeeperExecutionFee",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "user",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "UserRefundFee",
    type: "event",
  },
];

const _bytecode =
  "0x61084661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80635a3911ca1461003a575b600080fd5b81801561004657600080fd5b5061005a61005536600461067b565b61005c565b005b600061006787610214565b6040516316c48fdd60e11b81526001600160a01b0380831660048301526024820188905230604483015291925090871690632d891fba90606401600060405180830381600087803b1580156100bb57600080fd5b505af11580156100cf573d6000803e3d6000fd5b5050604051632e1a7d4d60e01b8152600481018890526001600160a01b0384169250632e1a7d4d9150602401600060405180830381600087803b15801561011557600080fd5b505af1158015610129573d6000803e3d6000fd5b5050505060005a61013a9086610701565b905060003a6101498a846102c7565b6101539190610714565b9050868111156101605750855b61016b898683610479565b7f57682c67f387deb1f0c7917d296d25f2c33b00578a1797dfbbf96bfb094d3ada858260405161019c929190610733565b60405180910390a160006101b08289610701565b9050806000036101c3575050505061020c565b6101ce8a8683610479565b7fc17d2b183ce4ddd0bd86090ef0c96ec1102448244a081e38deb95d2ec22612aa85826040516101ff929190610733565b60405180910390a1505050505b505050505050565b6000816001600160a01b03166321f8a72160405160200161024c9060208082526003908201526215d39560ea1b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161028091815260200190565b602060405180830381865afa15801561029d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c1919061074c565b92915050565b600080836001600160a01b031663bd02d0f5604051602001610319906020808252601c908201527b11561150d5551253d397d1915157d09054d157d1d054d7d31253525560221b604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161034d91815260200190565b602060405180830381865afa15801561036a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038e9190610769565b90506000846001600160a01b031663bd02d0f56040516020016103e2906020808252601f908201527f455845435554494f4e5f4645455f4d554c5449504c4945525f464143544f5200604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161041691815260200190565b602060405180830381865afa158015610433573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104579190610769565b905060006104658583610639565b61046f9084610782565b9695505050505050565b8060000361048657505050565b6000836001600160a01b031663bd02d0f56040516020016104d8906020808252601f908201527f4e41544956455f544f4b454e5f5452414e534645525f4741535f4c494d495400604082015260600190565b604051602081830303815290604052805190602001206040518263ffffffff1660e01b815260040161050c91815260200190565b602060405180830381865afa158015610529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054d9190610769565b9050600080846001600160a01b0316848490604051600060405180830381858888f193505050503d80600081146105a0576040519150601f19603f3d011682016040523d82523d6000602084013e6105a5565b606091505b509150915081156105b857505050505050565b6000816040516020016105cb91906107db565b60405160208183030381529060405290507f6c4e9d88878940a822d239187b8b00d62a80dce222d53bc5f1fb072d9c34b6818160405161060b91906107db565b60405180910390a18585604051633828654560e11b8152600401610630929190610733565b60405180910390fd5b600068327cb2734119d3b7a9601e1b6106528385610714565b61065c91906107ee565b9392505050565b6001600160a01b038116811461067857600080fd5b50565b60008060008060008060c0878903121561069457600080fd5b863561069f81610663565b955060208701356106af81610663565b9450604087013593506060870135925060808701356106cd81610663565b915060a08701356106dd81610663565b809150509295509295509295565b634e487b7160e01b600052601160045260246000fd5b818103818111156102c1576102c16106eb565b600081600019048311821515161561072e5761072e6106eb565b500290565b6001600160a01b03929092168252602082015260400190565b60006020828403121561075e57600080fd5b815161065c81610663565b60006020828403121561077b57600080fd5b5051919050565b808201808211156102c1576102c16106eb565b6000815180845260005b818110156107bb5760208185018101518683018201520161079f565b506000602082860101526020601f19601f83011685010191505092915050565b60208152600061065c6020830184610795565b60008261080b57634e487b7160e01b600052601260045260246000fd5b50049056fea2646970667358221220c2c27edd9d834999255910e63d61aa22858c908006c97e07ce3970eed4fe1ff864736f6c63430008100033";

type GasUtilsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: GasUtilsConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class GasUtils__factory extends ContractFactory {
  constructor(...args: GasUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<GasUtils> {
    return super.deploy(overrides || {}) as Promise<GasUtils>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): GasUtils {
    return super.attach(address) as GasUtils;
  }
  override connect(signer: Signer): GasUtils__factory {
    return super.connect(signer) as GasUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GasUtilsInterface {
    return new utils.Interface(_abi) as GasUtilsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): GasUtils {
    return new Contract(address, _abi, signerOrProvider) as GasUtils;
  }
}
