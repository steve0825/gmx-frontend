/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { PositionUtils, PositionUtilsInterface } from "../../../contracts/position/PositionUtils";

const _abi = [
  {
    inputs: [],
    name: "LiquidatablePosition",
    type: "error",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212208bf02516cc4bcf08ef79886cd2546ab0c42bcd11f80e049109c79f256e82301364736f6c63430008100033";

type PositionUtilsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: PositionUtilsConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class PositionUtils__factory extends ContractFactory {
  constructor(...args: PositionUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PositionUtils> {
    return super.deploy(overrides || {}) as Promise<PositionUtils>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PositionUtils {
    return super.attach(address) as PositionUtils;
  }
  override connect(signer: Signer): PositionUtils__factory {
    return super.connect(signer) as PositionUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PositionUtilsInterface {
    return new utils.Interface(_abi) as PositionUtilsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): PositionUtils {
    return new Contract(address, _abi, signerOrProvider) as PositionUtils;
  }
}
