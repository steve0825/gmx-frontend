/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { PricingUtilsTest, PricingUtilsTestInterface } from "../../../contracts/test/PricingUtilsTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__Exp2InputTooBig",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "x",
        type: "uint256",
      },
    ],
    name: "PRBMathUD60x18__LogInputTooSmall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "prod1",
        type: "uint256",
      },
    ],
    name: "PRBMath__MulDivFixedPointOverflow",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "diffUsd",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "impactFactor",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "impactExponentFactor",
        type: "uint256",
      },
    ],
    name: "applyImpactFactor",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610b73806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c320b6aa14610030575b600080fd5b61004361003e366004610aa7565b610055565b60405190815260200160405180910390f35b600061006284848461006c565b90505b9392505050565b600068327cb2734119d3b7a9601e1b84101561008a57506000610065565b60006100a6610098866100d2565b6100a1856100d2565b6100e9565b90506100b18161012b565b905060026100bf828661013c565b6100c99190610ae9565b95945050505050565b60006100e364e8d4a5100083610ae9565b92915050565b60008260000361011157811561010057600061010a565b670de0b6b3a76400005b90506100e3565b6100656101266101208561015f565b8461021a565b610226565b60006100e364e8d4a5100083610b0b565b600068327cb2734119d3b7a9601e1b6101558385610b0b565b6100659190610ae9565b6000670de0b6b3a764000082101561019257604051633621413760e21b8152600481018390526024015b60405180910390fd5b60006101a7670de0b6b3a7640000840461026c565b670de0b6b3a764000081029250905082811c670de0b6b3a763ffff1981016101d0575050919050565b6706f05b59d3b200005b801561021257670de0b6b3a7640000828002049150671bc16d674ec80000821061020a579283019260019190911c905b60011c6101da565b505050919050565b6000610065838361034f565b6000680a688906bd8b000000821061025457604051634a4f26f160e01b815260048101839052602401610189565b670de0b6b3a7640000604083901b0461006581610415565b6000600160801b821061028c57608091821c916102899082610b2a565b90505b600160401b82106102aa57604091821c916102a79082610b2a565b90505b600160201b82106102c857602091821c916102c59082610b2a565b90505b6201000082106102e557601091821c916102e29082610b2a565b90505b610100821061030157600891821c916102fe9082610b2a565b90505b6010821061031c57600491821c916103199082610b2a565b90505b6004821061033757600291821c916103349082610b2a565b90505b6002821061034a576100e3600182610b2a565b919050565b60008080600019848609848602925082811083820303915050670de0b6b3a764000081106103935760405163698d9a0160e11b815260048101829052602401610189565b600080670de0b6b3a764000086880991506706f05b59d3b1ffff82119050826000036103d15780670de0b6b3a76400008504019450505050506100e3565b620400008285030493909111909103600160ee1b02919091177faccb18165bd6fe31ae1cf318dc5b51eee0e1ba569b88cd74c1773b91fac106690201905092915050565b600160bf1b6001603f1b8216156104355768016a09e667f3bcc9090260401c5b6001603e1b821615610450576801306fe0a31b7152df0260401c5b6001603d1b82161561046b576801172b83c7d517adce0260401c5b6001603c1b8216156104865768010b5586cf9890f62a0260401c5b6001603b1b8216156104a1576801059b0d31585743ae0260401c5b6001603a1b8216156104bc57680102c9a3e778060ee70260401c5b600160391b8216156104d75768010163da9fb33356d80260401c5b600160381b8216156104f257680100b1afa5abcbed610260401c5b600160371b82161561050d5768010058c86da1c09ea20260401c5b600160361b821615610528576801002c605e2e8cec500260401c5b600160351b82161561054357680100162f3904051fa10260401c5b600160341b82161561055e576801000b175effdc76ba0260401c5b600160331b82161561057957680100058ba01fb9f96d0260401c5b600160321b8216156105945768010002c5cc37da94920260401c5b600160311b8216156105af576801000162e525ee05470260401c5b600160301b8216156105ca5768010000b17255775c040260401c5b6001602f1b8216156105e5576801000058b91b5bc9ae0260401c5b6001602e1b82161561060057680100002c5c89d5ec6d0260401c5b6001602d1b82161561061b5768010000162e43f4f8310260401c5b6001602c1b82161561063657680100000b1721bcfc9a0260401c5b6001602b1b8216156106515768010000058b90cf1e6e0260401c5b6001602a1b82161561066c576801000002c5c863b73f0260401c5b600160291b82161561068757680100000162e430e5a20260401c5b600160281b8216156106a2576801000000b1721835510260401c5b600160271b8216156106bd57680100000058b90c0b490260401c5b600160261b8216156106d85768010000002c5c8601cc0260401c5b600160251b8216156106f3576801000000162e42fff00260401c5b600160241b82161561070e5768010000000b17217fbb0260401c5b600160231b821615610729576801000000058b90bfce0260401c5b600160221b82161561074457680100000002c5c85fe30260401c5b600160211b82161561075f5768010000000162e42ff10260401c5b600160201b82161561077a57680100000000b17217f80260401c5b63800000008216156107955768010000000058b90bfc0260401c5b63400000008216156107b0576801000000002c5c85fe0260401c5b63200000008216156107cb57680100000000162e42ff0260401c5b63100000008216156107e6576801000000000b17217f0260401c5b630800000082161561080157680100000000058b90c00260401c5b630400000082161561081c5768010000000002c5c8600260401c5b6302000000821615610837576801000000000162e4300260401c5b63010000008216156108525768010000000000b172180260401c5b6280000082161561086c576801000000000058b90c0260401c5b6240000082161561088657680100000000002c5c860260401c5b622000008216156108a05768010000000000162e430260401c5b621000008216156108ba57680100000000000b17210260401c5b620800008216156108d45768010000000000058b910260401c5b620400008216156108ee576801000000000002c5c80260401c5b6202000082161561090857680100000000000162e40260401c5b620100008216156109215761b172600160401b010260401c5b618000821615610939576158b9600160401b010260401c5b61400082161561095157612c5d600160401b010260401c5b6120008216156109695761162e600160401b010260401c5b61100082161561098157610b17600160401b010260401c5b6108008216156109995761058c600160401b010260401c5b6104008216156109b1576102c6600160401b010260401c5b6102008216156109c957610163600160401b010260401c5b6101008216156109e05760b1600160401b010260401c5b60808216156109f6576059600160401b010260401c5b6040821615610a0c57602c600160401b010260401c5b6020821615610a22576016600160401b010260401c5b6010821615610a3857600b600160401b010260401c5b6008821615610a4e576006600160401b010260401c5b6004821615610a64576003600160401b010260401c5b6002821615610a7a576001600160401b010260401c5b6001821615610a90576001600160401b010260401c5b670de0b6b3a76400000260409190911c60bf031c90565b600080600060608486031215610abc57600080fd5b505081359360208301359350604090920135919050565b634e487b7160e01b600052601160045260246000fd5b600082610b0657634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615610b2557610b25610ad3565b500290565b808201808211156100e3576100e3610ad356fea2646970667358221220a51b9abacd125550ef02d7b02b4e9210875286a5a8d1374564928b5a14de2dbb64736f6c63430008100033";

type PricingUtilsTestConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: PricingUtilsTestConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class PricingUtilsTest__factory extends ContractFactory {
  constructor(...args: PricingUtilsTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<PricingUtilsTest> {
    return super.deploy(overrides || {}) as Promise<PricingUtilsTest>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): PricingUtilsTest {
    return super.attach(address) as PricingUtilsTest;
  }
  override connect(signer: Signer): PricingUtilsTest__factory {
    return super.connect(signer) as PricingUtilsTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PricingUtilsTestInterface {
    return new utils.Interface(_abi) as PricingUtilsTestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): PricingUtilsTest {
    return new Contract(address, _abi, signerOrProvider) as PricingUtilsTest;
  }
}
