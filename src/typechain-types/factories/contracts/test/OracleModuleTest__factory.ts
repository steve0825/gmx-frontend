/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { OracleModuleTest, OracleModuleTestInterface } from "../../../contracts/test/OracleModuleTest";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "reason",
        type: "string",
      },
    ],
    name: "OracleError",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract Oracle",
        name: "oracle",
        type: "address",
      },
      {
        internalType: "contract DataStore",
        name: "dataStore",
        type: "address",
      },
      {
        internalType: "contract EventEmitter",
        name: "eventEmitter",
        type: "address",
      },
      {
        components: [
          {
            internalType: "uint256",
            name: "signerInfo",
            type: "uint256",
          },
          {
            internalType: "address[]",
            name: "tokens",
            type: "address[]",
          },
          {
            internalType: "uint256[]",
            name: "compactedOracleBlockNumbers",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "compactedOracleTimestamps",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "compactedDecimals",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "compactedMinPrices",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "compactedMinPricesIndexes",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "compactedMaxPrices",
            type: "uint256[]",
          },
          {
            internalType: "uint256[]",
            name: "compactedMaxPricesIndexes",
            type: "uint256[]",
          },
          {
            internalType: "bytes[]",
            name: "signatures",
            type: "bytes[]",
          },
          {
            internalType: "address[]",
            name: "priceFeedTokens",
            type: "address[]",
          },
        ],
        internalType: "struct OracleUtils.SetPricesParams",
        name: "oracleParams",
        type: "tuple",
      },
    ],
    name: "withOraclePricesTest",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107e8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806332db9f2d14610030575b600080fd5b61004361003e366004610363565b610045565b005b83838383836001600160a01b0316633608d9e08484846040518463ffffffff1660e01b815260040161007993929190610657565b600060405180830381600087803b15801561009357600080fd5b505af11580156100a7573d6000803e3d6000fd5b50505050836001600160a01b031662ccf1556040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156100e557600080fd5b505af11580156100f9573d6000803e3d6000fd5b505050505050505050505050565b6001600160a01b038116811461011c57600080fd5b50565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b03811182821017156101585761015861011f565b60405290565b604051601f8201601f191681016001600160401b03811182821017156101865761018661011f565b604052919050565b60006001600160401b038211156101a7576101a761011f565b5060051b60200190565b600082601f8301126101c257600080fd5b813560206101d76101d28361018e565b61015e565b82815260059290921b840181019181810190868411156101f657600080fd5b8286015b8481101561021a57803561020d81610107565b83529183019183016101fa565b509695505050505050565b600082601f83011261023657600080fd5b813560206102466101d28361018e565b82815260059290921b8401810191818101908684111561026557600080fd5b8286015b8481101561021a5780358352918301918301610269565b6000601f838184011261029257600080fd5b823560206102a26101d28361018e565b82815260059290921b850181019181810190878411156102c157600080fd5b8287015b848110156103575780356001600160401b03808211156102e55760008081fd5b818a0191508a603f8301126102fa5760008081fd5b858201356040828211156103105761031061011f565b610321828b01601f1916890161015e565b92508183528c818386010111156103385760008081fd5b81818501898501375060009082018701528452509183019183016102c5565b50979650505050505050565b6000806000806080858703121561037957600080fd5b843561038481610107565b9350602085013561039481610107565b925060408501356103a481610107565b915060608501356001600160401b03808211156103c057600080fd5b9086019061016082890312156103d557600080fd5b6103dd610135565b823581526020830135828111156103f357600080fd5b6103ff8a8286016101b1565b60208301525060408301358281111561041757600080fd5b6104238a828601610225565b60408301525060608301358281111561043b57600080fd5b6104478a828601610225565b60608301525060808301358281111561045f57600080fd5b61046b8a828601610225565b60808301525060a08301358281111561048357600080fd5b61048f8a828601610225565b60a08301525060c0830135828111156104a757600080fd5b6104b38a828601610225565b60c08301525060e0830135828111156104cb57600080fd5b6104d78a828601610225565b60e08301525061010080840135838111156104f157600080fd5b6104fd8b828701610225565b828401525050610120808401358381111561051757600080fd5b6105238b828701610280565b828401525050610140808401358381111561053d57600080fd5b6105498b8287016101b1565b82840152505080935050505092959194509250565b600081518084526020808501945080840160005b838110156105975781516001600160a01b031687529582019590820190600101610572565b509495945050505050565b600081518084526020808501945080840160005b83811015610597578151875295820195908201906001016105b6565b600081518084526020808501808196508360051b810191508286016000805b86811015610649578385038a5282518051808752835b81811015610622578281018901518882018a01528801610607565b5086810188018490529a87019a601f01601f191690950186019450918501916001016105f1565b509298975050505050505050565b600060018060a01b038086168352808516602084015250606060408301528251606083015260208301516101608060808501526106986101c085018361055e565b91506040850151605f19808685030160a08701526106b684836105a2565b935060608701519150808685030160c08701526106d384836105a2565b935060808701519150808685030160e08701526106f084836105a2565b935060a0870151915061010081878603018188015261070f85846105a2565b945060c0880151925061012082888703018189015261072e86856105a2565b955060e089015193506101408389880301818a015261074d87866105a2565b9650828a015194508389880301868a015261076887866105a2565b9650818a0151955083898803016101808a015261078587876105d2565b9650808a0151955050505080868503016101a087015250506107a7828261055e565b97965050505050505056fea2646970667358221220d00b61e9f58a145a6d6263ba884102c5a934d229c997b914ec86662a87dda3f764736f6c63430008100033";

type OracleModuleTestConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: OracleModuleTestConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class OracleModuleTest__factory extends ContractFactory {
  constructor(...args: OracleModuleTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<OracleModuleTest> {
    return super.deploy(overrides || {}) as Promise<OracleModuleTest>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): OracleModuleTest {
    return super.attach(address) as OracleModuleTest;
  }
  override connect(signer: Signer): OracleModuleTest__factory {
    return super.connect(signer) as OracleModuleTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleModuleTestInterface {
    return new utils.Interface(_abi) as OracleModuleTestInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): OracleModuleTest {
    return new Contract(address, _abi, signerOrProvider) as OracleModuleTest;
  }
}
