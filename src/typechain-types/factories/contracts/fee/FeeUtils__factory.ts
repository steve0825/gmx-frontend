/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { FeeUtils, FeeUtilsInterface } from "../../../contracts/fee/FeeUtils";

const _abi = [
  {
    inputs: [],
    name: "DEPOSIT_FEE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "POSITION_FEE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SWAP_FEE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WITHDRAWAL_FEE",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61019961003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100565760003560e01c806355c790f01461005b578063768aebde14610075578063a5d33ed51461007d578063de363e6514610085575b600080fd5b61006361008d565b60405190815260200160405180910390f35b6100636100d6565b610063610102565b610063610134565b6040516020016100bd906020808252600c908201526b504f534954494f4e5f46454560a01b604082015260600190565b6040516020818303038152906040528051906020012081565b6040516020016100bd90602080825260089082015267535741505f46454560c01b604082015260600190565b6040516020016100bd906020808252600e908201526d5749544844524157414c5f46454560901b604082015260600190565b6040516020016100bd906020808252600b908201526a4445504f5349545f46454560a81b60408201526060019056fea2646970667358221220fd25de2f3f80346f92f508648a41d65507fee633ae0f25f3f7c334e481b5c56064736f6c63430008100033";

type FeeUtilsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: FeeUtilsConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class FeeUtils__factory extends ContractFactory {
  constructor(...args: FeeUtilsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(overrides?: Overrides & { from?: PromiseOrValue<string> }): Promise<FeeUtils> {
    return super.deploy(overrides || {}) as Promise<FeeUtils>;
  }
  override getDeployTransaction(overrides?: Overrides & { from?: PromiseOrValue<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FeeUtils {
    return super.attach(address) as FeeUtils;
  }
  override connect(signer: Signer): FeeUtils__factory {
    return super.connect(signer) as FeeUtils__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FeeUtilsInterface {
    return new utils.Interface(_abi) as FeeUtilsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): FeeUtils {
    return new Contract(address, _abi, signerOrProvider) as FeeUtils;
  }
}
